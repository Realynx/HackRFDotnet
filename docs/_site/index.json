{
  "HackRFDotnet.Benchmarks/bin/Release/net9.0/BenchmarkDotNet.Artifacts/results/HackRFDotnet.Benchmarks.IQConvertBytesBenchmarks-report-github.html": {
    "href": "HackRFDotnet.Benchmarks/bin/Release/net9.0/BenchmarkDotNet.Artifacts/results/HackRFDotnet.Benchmarks.IQConvertBytesBenchmarks-report-github.html",
    "title": "| HackrfDotnet",
    "summary": "BenchmarkDotNet v0.15.2, Windows 10 (10.0.19045.6216/22H2/2022Update) 12th Gen Intel Core i9-12900K 3.20GHz, 1 CPU, 24 logical and 16 physical cores .NET SDK 10.0.100-preview.7.25380.108 [Host] : .NET 9.0.8 (9.0.825.36511), X64 RyuJIT AVX2 DefaultJob : .NET 9.0.8 (9.0.825.36511), X64 RyuJIT AVX2 Method IqBytesLength Mean Error StdDev Ratio RatioSD IQConvertBytes_QuadAccess 262144 235.1 μs 4.67 μs 4.37 μs 1.00 0.02 IQConvertBytes_SingleAccess 262144 235.0 μs 2.05 μs 1.91 μs 1.00 0.01"
  },
  "HackRFDotnet.Benchmarks/bin/Release/net9.0/BenchmarkDotNet.Artifacts/results/HackRFDotnet.Benchmarks.IQCorrectionBenchmarks-report-github.html": {
    "href": "HackRFDotnet.Benchmarks/bin/Release/net9.0/BenchmarkDotNet.Artifacts/results/HackRFDotnet.Benchmarks.IQCorrectionBenchmarks-report-github.html",
    "title": "| HackrfDotnet",
    "summary": "BenchmarkDotNet v0.15.2, Windows 10 (10.0.19045.6216/22H2/2022Update) 12th Gen Intel Core i9-12900K 3.20GHz, 1 CPU, 24 logical and 16 physical cores .NET SDK 10.0.100-preview.7.25380.108 [Host] : .NET 9.0.8 (9.0.825.36511), X64 RyuJIT AVX2 DefaultJob : .NET 9.0.8 (9.0.825.36511), X64 RyuJIT AVX2 Method IqLength Mean Error StdDev Ratio RatioSD IQCorrection_QuadAccess 131072 364.4 μs 6.44 μs 6.02 μs 1.01 0.03 IQCorrection_SingleAccess 131072 361.9 μs 7.09 μs 10.83 μs 1.00 0.04"
  },
  "HackRFDotnetDocs/getting-started.html": {
    "href": "HackRFDotnetDocs/getting-started.html",
    "title": "Getting Started With HackRf Dotnet | HackrfDotnet",
    "summary": "Getting Started With HackRf Dotnet The most basic way we can use HackRfDotnet is by playing an FM audio stream. var controllerService = new RfDeviceControllerService(); Console.WriteLine(\"looking for HackRf Device...\"); var deviceList = controllerService.FindDevices(); Console.WriteLine($\"Found {deviceList.devicecount} HackRf devices... Opening Rx\"); using var rfDevice = controllerService.ConnectToFirstDevice(); if (rfDevice is null) { Console.WriteLine(\"Could not connect to Rf Device\"); return; } // Make an IQDeviceStream from the rf device. // this immutable stream will stem all of your signal processing pipelines with data. using var deviceStream = new IQDeviceStream(rfDevice); // Open Rx from the radio device at 20 Mega Samples Per Second. deviceStream.OpenRx(SampleRate.FromMSps(20)); // Set the radio frequency channel amd bandwidth. rfDevice.SetFrequency(RadioBand.FromMHz(98.7f), RadioBand.FromKHz(200)); // We must build an effects pipeline to clean up our received signal from the SDR. var effectsPipeline = new SignalProcessingBuilder() // DownSampleEffect decimates your signal down to it's bandwidth. // Since our signal has been frequency shifted by the SDR mixer // our target frequency has been shifted to Direct Current (DC). // Meaning we don't need any more sample rate than the band of the signal to represent it in the time domain, // so we reduce it's extraneous information .AddSignalEffect(new DownSampleEffect(deviceStream.SampleRate, rfDevice.Bandwidth.NyquistSampleRate, out var reducedSampleRate, out var producedChunkSize)) // Fast Fourier Transform from the Time domain signal to the Frequency domain .AddSignalEffect(new FftEffect(true, producedChunkSize)) // Low pass filter our band (Since we are mixed to DC, we only need to low pass filter the signal it gets affected on + and -) .AddSignalEffect(new LowPassFilterEffect(reducedSampleRate, rfDevice.Bandwidth)) // Inverse Fast Fourier Transform from the Frequency domain back to the Time domain. .AddSignalEffect(new FftEffect(false, producedChunkSize)) // Compile our effect pipeline .BuildPipeline(); // Create a signal stream and configure it with our effects pipeline, // it will allow us to read from it as a stream with pre-demodulated results, like a StreamReader var fmSignalStream = new FmSignalStream(deviceStream, reducedSampleRate, stereo: true, processingPipeline: effectsPipeline, keepOpen: false); // And AnaloguePlayer let's us resample and pipe an audio out the speakers. var fmPlayer = new AnaloguePlayer(fmSignalStream); fmPlayer.PlayStreamAsync(rfDevice.Frequency, rfDevice.Bandwidth, 48000); Signal Processing Pipelines A Signal Processing Pipeline, is a method of applying a chain of effects onto a signal from the SignalStream. A SignalStream is a stream piped from the IQDeviceStream Without a Signal Processing Pipeline you will get the full capture data."
  },
  "HackRFDotnetDocs/introduction.html": {
    "href": "HackRFDotnetDocs/introduction.html",
    "title": "Welcome to HackRfDotnet | HackrfDotnet",
    "summary": "Welcome to HackRfDotnet HackRf Dotnet is the only complete and cross platform hackrf api wrapper for C# Dotnet."
  },
  "README.html": {
    "href": "README.html",
    "title": "| HackrfDotnet",
    "summary": "#HackRF Dotnet A complete hackrf library in C# dotnet with perormance in mind. Very light weight. Cross platform, Windows or Linux."
  },
  "_githubPages/api/BasicScanner.NativeMethods.CHAR_INFO.html": {
    "href": "_githubPages/api/BasicScanner.NativeMethods.CHAR_INFO.html",
    "title": "Struct CHAR_INFO | HackrfDotnet",
    "summary": "Struct CHAR_INFO Namespace BasicScanner.NativeMethods Assembly BasicScanner.dll public struct CHAR_INFO Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Attributes public short Attributes Field Value short UnicodeChar public char UnicodeChar Field Value char"
  },
  "_githubPages/api/BasicScanner.NativeMethods.COORD.html": {
    "href": "_githubPages/api/BasicScanner.NativeMethods.COORD.html",
    "title": "Struct COORD | HackrfDotnet",
    "summary": "Struct COORD Namespace BasicScanner.NativeMethods Assembly BasicScanner.dll public struct COORD Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors COORD(short, short) public COORD(short x, short y) Parameters x short y short Fields X public short X Field Value short Y public short Y Field Value short"
  },
  "_githubPages/api/BasicScanner.NativeMethods.SMALL_RECT.html": {
    "href": "_githubPages/api/BasicScanner.NativeMethods.SMALL_RECT.html",
    "title": "Struct SMALL_RECT | HackrfDotnet",
    "summary": "Struct SMALL_RECT Namespace BasicScanner.NativeMethods Assembly BasicScanner.dll public struct SMALL_RECT Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Bottom public short Bottom Field Value short Left public short Left Field Value short Right public short Right Field Value short Top public short Top Field Value short"
  },
  "_githubPages/api/BasicScanner.NativeMethods.html": {
    "href": "_githubPages/api/BasicScanner.NativeMethods.html",
    "title": "Namespace BasicScanner.NativeMethods | HackrfDotnet",
    "summary": "Namespace BasicScanner.NativeMethods Classes kernel32Methods Structs CHAR_INFO COORD SMALL_RECT"
  },
  "_githubPages/api/BasicScanner.NativeMethods.kernel32Methods.html": {
    "href": "_githubPages/api/BasicScanner.NativeMethods.kernel32Methods.html",
    "title": "Class kernel32Methods | HackrfDotnet",
    "summary": "Class kernel32Methods Namespace BasicScanner.NativeMethods Assembly BasicScanner.dll public static class kernel32Methods Inheritance object kernel32Methods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields STD_OUTPUT_HANDLE public const int STD_OUTPUT_HANDLE = -11 Field Value int Methods GetStdHandle(int) public static extern nint GetStdHandle(int nStdHandle) Parameters nStdHandle int Returns nint WriteConsoleOutputW(nint, CHAR_INFO*, COORD, COORD, ref SMALL_RECT) public static extern bool WriteConsoleOutputW(nint hConsoleOutput, CHAR_INFO* lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, ref SMALL_RECT lpWriteRegion) Parameters hConsoleOutput nint lpBuffer CHAR_INFO* dwBufferSize COORD dwBufferCoord COORD lpWriteRegion SMALL_RECT Returns bool"
  },
  "_githubPages/api/BasicScanner.Services.SpectrumDisplayService.html": {
    "href": "_githubPages/api/BasicScanner.Services.SpectrumDisplayService.html",
    "title": "Class SpectrumDisplayService | HackrfDotnet",
    "summary": "Class SpectrumDisplayService Namespace BasicScanner.Services Assembly BasicScanner.dll public class SpectrumDisplayService Inheritance object SpectrumDisplayService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SpectrumDisplayService() public SpectrumDisplayService() Methods StartAsync(DigitalRadioDevice, SignalStream, CancellationToken) public Task StartAsync(DigitalRadioDevice rfDevice, SignalStream signalStream, CancellationToken cancellationToken) Parameters rfDevice DigitalRadioDevice signalStream SignalStream cancellationToken CancellationToken Returns Task"
  },
  "_githubPages/api/BasicScanner.Services.html": {
    "href": "_githubPages/api/BasicScanner.Services.html",
    "title": "Namespace BasicScanner.Services | HackrfDotnet",
    "summary": "Namespace BasicScanner.Services Classes SpectrumDisplayService"
  },
  "_githubPages/api/FftwF.Dotnet.Direction.html": {
    "href": "_githubPages/api/FftwF.Dotnet.Direction.html",
    "title": "Class Direction | HackrfDotnet",
    "summary": "Class Direction Namespace FftwF.Dotnet Assembly FftwF.Dotnet.dll public static class Direction Inheritance object Direction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Backward public const int Backward = 1 Field Value int Forward public const int Forward = -1 Field Value int"
  },
  "_githubPages/api/FftwF.Dotnet.FftwFlags.html": {
    "href": "_githubPages/api/FftwF.Dotnet.FftwFlags.html",
    "title": "Enum FftwFlags | HackrfDotnet",
    "summary": "Enum FftwFlags Namespace FftwF.Dotnet Assembly FftwF.Dotnet.dll [Flags] public enum FftwFlags : uint Fields AllowLargeGeneric = 8192 AllowPruning = 1048576 BelievePcost = 256 ConserveMemory = 4 DestroyInput = 1 Estimate = 64 EstimatePatient = 128 Exhaustive = 8 Measure = 0 NoBuffering = 2048 NoDftR2Hc = 512 NoFixedRadixLargeN = 524288 NoIndirectOp = 4096 NoNonthreaded = 1024 NoRankSplits = 16384 NoSimd = 131072 NoSlow = 262144 NoVrankSplits = 32768 NoVrecourse = 65536 Patient = 32 PreserveInput = 16 Unaligned = 2 WisdomOnly = 2097152"
  },
  "_githubPages/api/FftwF.Dotnet.FftwPlan.html": {
    "href": "_githubPages/api/FftwF.Dotnet.FftwPlan.html",
    "title": "Class FftwPlan | HackrfDotnet",
    "summary": "Class FftwPlan Namespace FftwF.Dotnet Assembly FftwF.Dotnet.dll public class FftwPlan : IDisposable Inheritance object FftwPlan Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FftwPlan(int, Span<Complex32>, Span<Complex32>, bool, FftwFlags) public FftwPlan(int length, Span<Complex32> complexIn, Span<Complex32> complexOut, bool forward = true, FftwFlags flags = FftwFlags.Measure) Parameters length int complexIn Span<Complex32> complexOut Span<Complex32> forward bool flags FftwFlags Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Execute() public void Execute()"
  },
  "_githubPages/api/FftwF.Dotnet.Limits.html": {
    "href": "_githubPages/api/FftwF.Dotnet.Limits.html",
    "title": "Class Limits | HackrfDotnet",
    "summary": "Class Limits Namespace FftwF.Dotnet Assembly FftwF.Dotnet.dll public static class Limits Inheritance object Limits Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields NoTimeLimit public const double NoTimeLimit = -1 Field Value double"
  },
  "_githubPages/api/FftwF.Dotnet.Native.NativeMethods.html": {
    "href": "_githubPages/api/FftwF.Dotnet.Native.NativeMethods.html",
    "title": "Class NativeMethods | HackrfDotnet",
    "summary": "Class NativeMethods Namespace FftwF.Dotnet.Native Assembly FftwF.Dotnet.dll public class NativeMethods Inheritance object NativeMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields FFTW_BACKWARD public const int FFTW_BACKWARD = 1 Field Value int FFTW_FORWARD public const int FFTW_FORWARD = -1 Field Value int FFTW_NO_TIMELIMIT public const float FFTW_NO_TIMELIMIT = -1 Field Value float Methods DestroyPlan(void*) public static extern void DestroyPlan(void* plan) Parameters plan void* ExecutePlan(void*) public static extern void ExecutePlan(void* plan) Parameters plan void* GetSingleDimensionDftPlan(int, Complex32*, Complex32*, int, FftwFlags) public static extern void* GetSingleDimensionDftPlan(int n, Complex32* input, Complex32* output, int sign, FftwFlags flags) Parameters n int input Complex32* output Complex32* sign int flags FftwFlags Returns void*"
  },
  "_githubPages/api/FftwF.Dotnet.Native.html": {
    "href": "_githubPages/api/FftwF.Dotnet.Native.html",
    "title": "Namespace FftwF.Dotnet.Native | HackrfDotnet",
    "summary": "Namespace FftwF.Dotnet.Native Classes NativeMethods"
  },
  "_githubPages/api/FftwF.Dotnet.html": {
    "href": "_githubPages/api/FftwF.Dotnet.html",
    "title": "Namespace FftwF.Dotnet | HackrfDotnet",
    "summary": "Namespace FftwF.Dotnet Classes Direction FftwPlan Limits Enums FftwFlags"
  },
  "_githubPages/api/HackRFDotnet.Benchmarks.IQConvertBytesBenchmarks.html": {
    "href": "_githubPages/api/HackRFDotnet.Benchmarks.IQConvertBytesBenchmarks.html",
    "title": "Class IQConvertBytesBenchmarks | HackrfDotnet",
    "summary": "Class IQConvertBytesBenchmarks Namespace HackRFDotnet.Benchmarks Assembly HackRFDotnet.Benchmarks.dll public class IQConvertBytesBenchmarks Inheritance object IQConvertBytesBenchmarks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IqBytesLength [Params(new object?[] { 262144 })] public int IqBytesLength { get; set; } Property Value int Methods IQConvertBytes_QuadAccess() [Benchmark(26, \"C:\\\\Users\\\\poofi\\\\source\\\\repos\\\\HackRFDotnet\\\\HackRFDotnet.Benchmarks\\\\IQConvertBytesBenchmarks.cs\")] public Complex[] IQConvertBytes_QuadAccess() Returns Complex[] IQConvertBytes_SingleAccess() [Benchmark(58, \"C:\\\\Users\\\\poofi\\\\source\\\\repos\\\\HackRFDotnet\\\\HackRFDotnet.Benchmarks\\\\IQConvertBytesBenchmarks.cs\", Baseline = true)] public Complex[] IQConvertBytes_SingleAccess() Returns Complex[] Setup() [GlobalSetup] public void Setup()"
  },
  "_githubPages/api/HackRFDotnet.Benchmarks.IQCorrectionBenchmarks.html": {
    "href": "_githubPages/api/HackRFDotnet.Benchmarks.IQCorrectionBenchmarks.html",
    "title": "Class IQCorrectionBenchmarks | HackrfDotnet",
    "summary": "Class IQCorrectionBenchmarks Namespace HackRFDotnet.Benchmarks Assembly HackRFDotnet.Benchmarks.dll public class IQCorrectionBenchmarks Inheritance object IQCorrectionBenchmarks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IqLength [Params(new object?[] { 131072 })] public int IqLength { get; set; } Property Value int Methods IQCorrection_QuadAccess() [Benchmark(27, \"C:\\\\Users\\\\poofi\\\\source\\\\repos\\\\HackRFDotnet\\\\HackRFDotnet.Benchmarks\\\\IQCorrectionBenchmarks.cs\")] public Complex[] IQCorrection_QuadAccess() Returns Complex[] IQCorrection_SingleAccess() [Benchmark(69, \"C:\\\\Users\\\\poofi\\\\source\\\\repos\\\\HackRFDotnet\\\\HackRFDotnet.Benchmarks\\\\IQCorrectionBenchmarks.cs\", Baseline = true)] public Complex[] IQCorrection_SingleAccess() Returns Complex[] Setup() [GlobalSetup] public void Setup()"
  },
  "_githubPages/api/HackRFDotnet.Benchmarks.Program.html": {
    "href": "_githubPages/api/HackRFDotnet.Benchmarks.Program.html",
    "title": "Class Program | HackrfDotnet",
    "summary": "Class Program Namespace HackRFDotnet.Benchmarks Assembly HackRFDotnet.Benchmarks.dll public static class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "_githubPages/api/HackRFDotnet.Benchmarks.html": {
    "href": "_githubPages/api/HackRFDotnet.Benchmarks.html",
    "title": "Namespace HackRFDotnet.Benchmarks | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.Benchmarks Classes IQConvertBytesBenchmarks IQCorrectionBenchmarks Program"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.DigitalRadioDevice.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.DigitalRadioDevice.html",
    "title": "Class DigitalRadioDevice | HackrfDotnet",
    "summary": "Class DigitalRadioDevice Namespace HackRFDotnet.ManagedApi Assembly HackRFDotnet.dll public class DigitalRadioDevice : IDisposable Inheritance object DigitalRadioDevice Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods RfDeviceExtensions.AttenuateAmplification(DigitalRadioDevice) Fields DevicePtr public readonly HackRFDevice* DevicePtr Field Value HackRFDevice* Properties Bandwidth public RadioBand Bandwidth { get; set; } Property Value RadioBand DeviceSamplingRate public SampleRate DeviceSamplingRate { get; set; } Property Value SampleRate Frequency public RadioBand Frequency { get; set; } Property Value RadioBand IsConnected public bool IsConnected { get; } Property Value bool Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() SetAmplifications(uint, uint, bool) public void SetAmplifications(uint lna, uint vga, bool internalAmp) Parameters lna uint vga uint internalAmp bool SetFrequency(RadioBand) public bool SetFrequency(RadioBand radioFrequency) Parameters radioFrequency RadioBand Returns bool SetFrequency(RadioBand, RadioBand) public bool SetFrequency(RadioBand radioFrequency, RadioBand bandwidth) Parameters radioFrequency RadioBand bandwidth RadioBand Returns bool SetSampleRate(SampleRate) public void SetSampleRate(SampleRate sampleRate) Parameters sampleRate SampleRate StartRx(HackRFSampleBlockCallback) public bool StartRx(HackRFSampleBlockCallback rxCallback) Parameters rxCallback HackRFSampleBlockCallback Returns bool StopRx() public bool StopRx() Returns bool"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Extensions.RfDeviceExtensions.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Extensions.RfDeviceExtensions.html",
    "title": "Class RfDeviceExtensions | HackrfDotnet",
    "summary": "Class RfDeviceExtensions Namespace HackRFDotnet.ManagedApi.Extensions Assembly HackRFDotnet.dll public static class RfDeviceExtensions Inheritance object RfDeviceExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AttenuateAmplification(DigitalRadioDevice) public static void AttenuateAmplification(this DigitalRadioDevice rfDevice) Parameters rfDevice DigitalRadioDevice"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Extensions.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Extensions.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Extensions | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Extensions Classes RfDeviceExtensions"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Services.AnaloguePlayer.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Services.AnaloguePlayer.html",
    "title": "Class AnaloguePlayer | HackrfDotnet",
    "summary": "Class AnaloguePlayer Namespace HackRFDotnet.ManagedApi.Services Assembly HackRFDotnet.dll public class AnaloguePlayer : IDisposable Inheritance object AnaloguePlayer Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnaloguePlayer(WaveSignalStream) public AnaloguePlayer(WaveSignalStream signalStream) Parameters signalStream WaveSignalStream Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() PlayStreamAsync(RadioBand, RadioBand, int) public virtual void PlayStreamAsync(RadioBand centerOffset, RadioBand bandwidth, int audioRate) Parameters centerOffset RadioBand bandwidth RadioBand audioRate int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Services.DigitalPlayer.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Services.DigitalPlayer.html",
    "title": "Class DigitalPlayer | HackrfDotnet",
    "summary": "Class DigitalPlayer Namespace HackRFDotnet.ManagedApi.Services Assembly HackRFDotnet.dll public class DigitalPlayer : IDisposable Inheritance object DigitalPlayer Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DigitalPlayer(HdRadioSignalStream) public DigitalPlayer(HdRadioSignalStream sampleDeModulator) Parameters sampleDeModulator HdRadioSignalStream Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() PlayStreamAsync(RadioBand, RadioBand, int) public virtual void PlayStreamAsync(RadioBand centerOffset, RadioBand bandwidth, int audioRate) Parameters centerOffset RadioBand bandwidth RadioBand audioRate int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Services.RfDeviceControllerService.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Services.RfDeviceControllerService.html",
    "title": "Class RfDeviceControllerService | HackrfDotnet",
    "summary": "Class RfDeviceControllerService Namespace HackRFDotnet.ManagedApi.Services Assembly HackRFDotnet.dll public class RfDeviceControllerService Inheritance object RfDeviceControllerService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RfDeviceControllerService() public RfDeviceControllerService() Fields RfDevices public readonly List<DigitalRadioDevice> RfDevices Field Value List<DigitalRadioDevice> Methods ConnectToFirstDevice() public DigitalRadioDevice? ConnectToFirstDevice() Returns DigitalRadioDevice FindDevices() public HackRFDeviceList FindDevices() Returns HackRFDeviceList"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Services.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Services.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Services | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Services Classes AnaloguePlayer DigitalPlayer RfDeviceControllerService"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Device.IQDeviceStream.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Device.IQDeviceStream.html",
    "title": "Class IQDeviceStream | HackrfDotnet",
    "summary": "Class IQDeviceStream Namespace HackRFDotnet.ManagedApi.Streams.Device Assembly HackRFDotnet.dll public class IQDeviceStream : IDisposable, IIQStream Inheritance object IQDeviceStream Implements IDisposable IIQStream Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IQDeviceStream(DigitalRadioDevice) public IQDeviceStream(DigitalRadioDevice rfDevice) Parameters rfDevice DigitalRadioDevice Properties BufferLength public int BufferLength { get; } Property Value int Frequency public RadioBand Frequency { get; } Property Value RadioBand SampleRate public SampleRate SampleRate { get; } Property Value SampleRate Methods Close() public void Close() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() OpenRx(SampleRate?) public void OpenRx(SampleRate? sampleRate = null) Parameters sampleRate SampleRate ReadBuffer(Span<IQ>) public int ReadBuffer(Span<IQ> iqBuffer) Parameters iqBuffer Span<IQ> Returns int SetSampleRate(SampleRate) public void SetSampleRate(SampleRate sampleRate) Parameters sampleRate SampleRate TxBuffer(Span<IQ>) public int TxBuffer(Span<IQ> iqFrame) Parameters iqFrame Span<IQ> Returns int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Device.IQFileStream.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Device.IQFileStream.html",
    "title": "Class IQFileStream | HackrfDotnet",
    "summary": "Class IQFileStream Namespace HackRFDotnet.ManagedApi.Streams.Device Assembly HackRFDotnet.dll public class IQFileStream : IIQStream, IDisposable Inheritance object IQFileStream Implements IIQStream IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IQFileStream(string) public IQFileStream(string fileName) Parameters fileName string Properties BufferLength public int BufferLength { get; } Property Value int Frequency public RadioBand Frequency { get; set; } Property Value RadioBand SampleRate public SampleRate SampleRate { get; set; } Property Value SampleRate Methods Close() public void Close() Dispose() public void Dispose() OpenRx(SampleRate?) public void OpenRx(SampleRate? sampleRate = null) Parameters sampleRate SampleRate ReadBuffer(Span<IQ>) public int ReadBuffer(Span<IQ> iqFrame) Parameters iqFrame Span<IQ> Returns int SetSampleRate(SampleRate) public void SetSampleRate(SampleRate sampleRate) Parameters sampleRate SampleRate TxBuffer(Span<IQ>) public int TxBuffer(Span<IQ> iqFrame) Parameters iqFrame Span<IQ> Returns int WriteBuffer(Span<byte>) public int WriteBuffer(Span<byte> iqFrame) Parameters iqFrame Span<byte> Returns int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Device.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Device.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Streams.Device | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Streams.Device Classes IQDeviceStream IQFileStream"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Exceptions.NullCallbackException.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Exceptions.NullCallbackException.html",
    "title": "Class NullCallbackException | HackrfDotnet",
    "summary": "Class NullCallbackException Namespace HackRFDotnet.ManagedApi.Streams.Exceptions Assembly HackRFDotnet.dll public class NullCallbackException : Exception, ISerializable Inheritance object Exception NullCallbackException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NullCallbackException(string?) public NullCallbackException(string? message) Parameters message string"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Exceptions.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Exceptions.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Streams.Exceptions | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Streams.Exceptions Classes NullCallbackException"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.IQ.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.IQ.html",
    "title": "Struct IQ | HackrfDotnet",
    "summary": "Struct IQ Namespace HackRFDotnet.ManagedApi.Streams Assembly HackRFDotnet.dll public struct IQ : IEquatable<IQ>, IFormattable Implements IEquatable<IQ> IFormattable Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors IQ(InterleavedSample) public IQ(InterleavedSample interleavedSample) Parameters interleavedSample InterleavedSample IQ(float, float) public IQ(float real, float imaginary) Parameters real float imaginary float Fields ImaginaryOne public static readonly IQ ImaginaryOne Field Value IQ Infinity public static readonly IQ Infinity Field Value IQ NaN public static readonly IQ NaN Field Value IQ One public static readonly IQ One Field Value IQ Zero public static readonly IQ Zero Field Value IQ Properties I Real public float I { get; set; } Property Value float Magnitude public float Magnitude { get; } Property Value float Phase public float Phase { get; } Property Value float Q Imaginary public float Q { get; set; } Property Value float Methods Abs(IQ) public static float Abs(IQ value) Parameters value IQ Returns float Acos(IQ) public static IQ Acos(IQ value) Parameters value IQ Returns IQ Add(IQ, IQ) public static IQ Add(IQ left, IQ right) Parameters left IQ right IQ Returns IQ Add(IQ, float) public static IQ Add(IQ left, float right) Parameters left IQ right float Returns IQ Add(float, IQ) public static IQ Add(float left, IQ right) Parameters left float right IQ Returns IQ Asin(IQ) public static IQ Asin(IQ value) Parameters value IQ Returns IQ Atan(IQ) public static IQ Atan(IQ value) Parameters value IQ Returns IQ Conjugate(IQ) public static IQ Conjugate(IQ value) Parameters value IQ Returns IQ Cos(IQ) public static IQ Cos(IQ value) Parameters value IQ Returns IQ Cosh(IQ) public static IQ Cosh(IQ value) Parameters value IQ Returns IQ Divide(IQ, IQ) public static IQ Divide(IQ dividend, IQ divisor) Parameters dividend IQ divisor IQ Returns IQ Divide(IQ, float) public static IQ Divide(IQ dividend, float divisor) Parameters dividend IQ divisor float Returns IQ Divide(float, IQ) public static IQ Divide(float dividend, IQ divisor) Parameters dividend float divisor IQ Returns IQ Equals(IQ) Indicates whether the current object is equal to another object of the same type. public bool Equals(IQ value) Parameters value IQ Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Exp(IQ) public static IQ Exp(IQ value) Parameters value IQ Returns IQ FromPolarCoordinates(float, float) public static IQ FromPolarCoordinates(float magnitude, float phase) Parameters magnitude float phase float Returns IQ GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. IsFinite(IQ) public static bool IsFinite(IQ value) Parameters value IQ Returns bool IsInfinity(IQ) public static bool IsInfinity(IQ value) Parameters value IQ Returns bool IsNaN(IQ) public static bool IsNaN(IQ value) Parameters value IQ Returns bool Log(IQ) public static IQ Log(IQ value) Parameters value IQ Returns IQ Log(IQ, float) public static IQ Log(IQ value, float baseValue) Parameters value IQ baseValue float Returns IQ Log10(IQ) public static IQ Log10(IQ value) Parameters value IQ Returns IQ Multiply(IQ, IQ) public static IQ Multiply(IQ left, IQ right) Parameters left IQ right IQ Returns IQ Multiply(IQ, float) public static IQ Multiply(IQ left, float right) Parameters left IQ right float Returns IQ Multiply(float, IQ) public static IQ Multiply(float left, IQ right) Parameters left float right IQ Returns IQ Negate(IQ) public static IQ Negate(IQ value) Parameters value IQ Returns IQ Pow(IQ, IQ) public static IQ Pow(IQ value, IQ power) Parameters value IQ power IQ Returns IQ Pow(IQ, float) public static IQ Pow(IQ value, float power) Parameters value IQ power float Returns IQ Reciprocal(IQ) public static IQ Reciprocal(IQ value) Parameters value IQ Returns IQ Sin(IQ) public static IQ Sin(IQ value) Parameters value IQ Returns IQ Sinh(IQ) public static IQ Sinh(IQ value) Parameters value IQ Returns IQ Sqrt(IQ) public static IQ Sqrt(IQ value) Parameters value IQ Returns IQ Subtract(IQ, IQ) public static IQ Subtract(IQ left, IQ right) Parameters left IQ right IQ Returns IQ Subtract(IQ, float) public static IQ Subtract(IQ left, float right) Parameters left IQ right float Returns IQ Subtract(float, IQ) public static IQ Subtract(float left, IQ right) Parameters left float right IQ Returns IQ Tan(IQ) public static IQ Tan(IQ value) Parameters value IQ Returns IQ Tanh(IQ) public static IQ Tanh(IQ value) Parameters value IQ Returns IQ ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(IFormatProvider?) public string ToString(IFormatProvider? provider) Parameters provider IFormatProvider Returns string ToString(string?) public string ToString(string? format) Parameters format string Returns string ToString(string?, IFormatProvider?) Formats the value of the current instance using the specified format. public string ToString(string? format, IFormatProvider? provider) Parameters format string The format to use. -or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. provider IFormatProvider Returns string The value of the current instance in the specified format. Operators operator +(IQ, IQ) public static IQ operator +(IQ left, IQ right) Parameters left IQ right IQ Returns IQ operator +(IQ, float) public static IQ operator +(IQ left, float right) Parameters left IQ right float Returns IQ operator +(float, IQ) public static IQ operator +(float left, IQ right) Parameters left float right IQ Returns IQ operator /(IQ, IQ) public static IQ operator /(IQ left, IQ right) Parameters left IQ right IQ Returns IQ operator /(IQ, float) public static IQ operator /(IQ left, float right) Parameters left IQ right float Returns IQ operator /(float, IQ) public static IQ operator /(float left, IQ right) Parameters left float right IQ Returns IQ operator ==(IQ, IQ) public static bool operator ==(IQ left, IQ right) Parameters left IQ right IQ Returns bool explicit operator IQ(decimal) public static explicit operator IQ(decimal value) Parameters value decimal Returns IQ implicit operator Complex(IQ) public static implicit operator Complex(IQ value) Parameters value IQ Returns Complex implicit operator IQ(byte) public static implicit operator IQ(byte value) Parameters value byte Returns IQ implicit operator IQ(char) public static implicit operator IQ(char value) Parameters value char Returns IQ implicit operator IQ(Half) public static implicit operator IQ(Half value) Parameters value Half Returns IQ implicit operator IQ(short) public static implicit operator IQ(short value) Parameters value short Returns IQ implicit operator IQ(int) public static implicit operator IQ(int value) Parameters value int Returns IQ implicit operator IQ(long) public static implicit operator IQ(long value) Parameters value long Returns IQ implicit operator IQ(nint) public static implicit operator IQ(nint value) Parameters value nint Returns IQ implicit operator IQ(Complex) public static implicit operator IQ(Complex value) Parameters value Complex Returns IQ implicit operator IQ(sbyte) public static implicit operator IQ(sbyte value) Parameters value sbyte Returns IQ implicit operator IQ(float) public static implicit operator IQ(float value) Parameters value float Returns IQ implicit operator IQ(ushort) public static implicit operator IQ(ushort value) Parameters value ushort Returns IQ implicit operator IQ(uint) public static implicit operator IQ(uint value) Parameters value uint Returns IQ implicit operator IQ(ulong) public static implicit operator IQ(ulong value) Parameters value ulong Returns IQ implicit operator IQ(nuint) public static implicit operator IQ(nuint value) Parameters value nuint Returns IQ operator !=(IQ, IQ) public static bool operator !=(IQ left, IQ right) Parameters left IQ right IQ Returns bool operator *(IQ, IQ) public static IQ operator *(IQ left, IQ right) Parameters left IQ right IQ Returns IQ operator *(IQ, float) public static IQ operator *(IQ left, float right) Parameters left IQ right float Returns IQ operator *(float, IQ) public static IQ operator *(float left, IQ right) Parameters left float right IQ Returns IQ operator -(IQ, IQ) public static IQ operator -(IQ left, IQ right) Parameters left IQ right IQ Returns IQ operator -(IQ, float) public static IQ operator -(IQ left, float right) Parameters left IQ right float Returns IQ operator -(float, IQ) public static IQ operator -(float left, IQ right) Parameters left float right IQ Returns IQ operator -(IQ) public static IQ operator -(IQ value) Parameters value IQ Returns IQ"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Interfaces.IIQStream.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Interfaces.IIQStream.html",
    "title": "Interface IIQStream | HackrfDotnet",
    "summary": "Interface IIQStream Namespace HackRFDotnet.ManagedApi.Streams.Interfaces Assembly HackRFDotnet.dll public interface IIQStream Properties BufferLength int BufferLength { get; } Property Value int Frequency RadioBand Frequency { get; } Property Value RadioBand SampleRate SampleRate SampleRate { get; } Property Value SampleRate Methods Close() void Close() Dispose() void Dispose() OpenRx(SampleRate?) void OpenRx(SampleRate? sampleRate = null) Parameters sampleRate SampleRate ReadBuffer(Span<IQ>) int ReadBuffer(Span<IQ> iqBuffer) Parameters iqBuffer Span<IQ> Returns int SetSampleRate(SampleRate) void SetSampleRate(SampleRate sampleRate) Parameters sampleRate SampleRate TxBuffer(Span<IQ>) int TxBuffer(Span<IQ> iqFrame) Parameters iqFrame Span<IQ> Returns int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Interfaces.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.Interfaces.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Streams.Interfaces | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Streams.Interfaces Interfaces IIQStream"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.InterleavedSample.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.InterleavedSample.html",
    "title": "Struct InterleavedSample | HackrfDotnet",
    "summary": "Struct InterleavedSample Namespace HackRFDotnet.ManagedApi.Streams Assembly HackRFDotnet.dll public struct InterleavedSample Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields I public sbyte I Field Value sbyte Q public sbyte Q Field Value sbyte Methods Clone() public InterleavedSample Clone() Returns InterleavedSample"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.BasicSignalScanningEffect.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.BasicSignalScanningEffect.html",
    "title": "Class BasicSignalScanningEffect | HackrfDotnet",
    "summary": "Class BasicSignalScanningEffect Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects Assembly HackRFDotnet.dll public class BasicSignalScanningEffect : SignalEffect, ISignalEffect Inheritance object SignalEffect BasicSignalScanningEffect Implements ISignalEffect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BasicSignalScanningEffect(DigitalRadioDevice, RadioBand, RadioBand[]) public BasicSignalScanningEffect(DigitalRadioDevice digitalRadioDevice, RadioBand bandwidth, RadioBand[] scanChannels) Parameters digitalRadioDevice DigitalRadioDevice bandwidth RadioBand scanChannels RadioBand[] Methods AffectSignal(Span<IQ>, int) public override int AffectSignal(Span<IQ> signalTheta, int length) Parameters signalTheta Span<IQ> length int Returns int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.DownSampleEffect.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.DownSampleEffect.html",
    "title": "Class DownSampleEffect | HackrfDotnet",
    "summary": "Class DownSampleEffect Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects Assembly HackRFDotnet.dll DownSampleEffect removes extraneous information from your signal using your desired bandwidth. Example: an FM radio's band is around 200 kHz; the minimum sample rate required to represent this is 400 kS/s (400,000 samples per second). It is recommended that you reduce the sample rate of your audio signal this way before further signal processing to save CPU. public class DownSampleEffect : SignalEffect, ISignalEffect, IDisposable Inheritance object SignalEffect DownSampleEffect Implements ISignalEffect IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DownSampleEffect(SampleRate, SampleRate, out SampleRate, out int) public DownSampleEffect(SampleRate sampleRate, SampleRate reducedSampleRate, out SampleRate newSampleRate, out int producedChunkSize) Parameters sampleRate SampleRate reducedSampleRate SampleRate newSampleRate SampleRate producedChunkSize int DownSampleEffect(SampleRate, SampleRate, int, out SampleRate, out int) public DownSampleEffect(SampleRate sampleRate, SampleRate reducedSampleRate, int processingSize, out SampleRate newSampleRate, out int producedChunkSize) Parameters sampleRate SampleRate reducedSampleRate SampleRate processingSize int newSampleRate SampleRate producedChunkSize int Methods AffectSignal(Span<IQ>, int) public override int AffectSignal(Span<IQ> signalTheta, int length) Parameters signalTheta Span<IQ> length int Returns int Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.FftEffect.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.FftEffect.html",
    "title": "Class FftEffect | HackrfDotnet",
    "summary": "Class FftEffect Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects Assembly HackRFDotnet.dll public class FftEffect : SignalEffect, ISignalEffect, IDisposable Inheritance object SignalEffect FftEffect Implements ISignalEffect IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FftEffect(bool, int) public FftEffect(bool forward, int chunkSize) Parameters forward bool chunkSize int Methods AffectSignal(Span<IQ>, int) public override int AffectSignal(Span<IQ> signalTheta, int length) Parameters signalTheta Span<IQ> length int Returns int Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.FrequencyCenteringEffect.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.FrequencyCenteringEffect.html",
    "title": "Class FrequencyCenteringEffect | HackrfDotnet",
    "summary": "Class FrequencyCenteringEffect Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects Assembly HackRFDotnet.dll public class FrequencyCenteringEffect : SignalEffect, ISignalEffect Inheritance object SignalEffect FrequencyCenteringEffect Implements ISignalEffect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FrequencyCenteringEffect(RadioBand, SampleRate) public FrequencyCenteringEffect(RadioBand frequencyOffset, SampleRate sampleRate) Parameters frequencyOffset RadioBand sampleRate SampleRate Methods AffectSignal(Span<IQ>, int) public override int AffectSignal(Span<IQ> signalTheta, int length) Parameters signalTheta Span<IQ> length int Returns int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.Interfaces.ISignalEffect.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.Interfaces.ISignalEffect.html",
    "title": "Interface ISignalEffect | HackrfDotnet",
    "summary": "Interface ISignalEffect Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.Interfaces Assembly HackRFDotnet.dll public interface ISignalEffect Methods AffectSignal(Span<IQ>, int) int AffectSignal(Span<IQ> signalTheta, int lendth) Parameters signalTheta Span<IQ> lendth int Returns int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.Interfaces.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.Interfaces.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.Interfaces | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.Interfaces Interfaces ISignalEffect"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.LowPassFilterEffect.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.LowPassFilterEffect.html",
    "title": "Class LowPassFilterEffect | HackrfDotnet",
    "summary": "Class LowPassFilterEffect Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects Assembly HackRFDotnet.dll public class LowPassFilterEffect : SignalEffect, ISignalEffect Inheritance object SignalEffect LowPassFilterEffect Implements ISignalEffect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LowPassFilterEffect(SampleRate, RadioBand) Apply a low pass filter on the signal. Expects Frequency Domain public LowPassFilterEffect(SampleRate sampleRate, RadioBand bandwith) Parameters sampleRate SampleRate bandwith RadioBand Methods AffectSignal(Span<IQ>, int) public override int AffectSignal(Span<IQ> signalTheta, int length) Parameters signalTheta Span<IQ> length int Returns int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.SignalEffect.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.SignalEffect.html",
    "title": "Class SignalEffect | HackrfDotnet",
    "summary": "Class SignalEffect Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects Assembly HackRFDotnet.dll public abstract class SignalEffect : ISignalEffect Inheritance object SignalEffect Implements ISignalEffect Derived BasicSignalScanningEffect DownSampleEffect FftEffect FrequencyCenteringEffect LowPassFilterEffect SquelchEffect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AffectSignal(Span<IQ>, int) public abstract int AffectSignal(Span<IQ> signalTheta, int length) Parameters signalTheta Span<IQ> length int Returns int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.SquelchEffect.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.SquelchEffect.html",
    "title": "Class SquelchEffect | HackrfDotnet",
    "summary": "Class SquelchEffect Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects Assembly HackRFDotnet.dll public class SquelchEffect : SignalEffect, ISignalEffect Inheritance object SignalEffect SquelchEffect Implements ISignalEffect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SquelchEffect(SampleRate) public SquelchEffect(SampleRate sampleRate) Parameters sampleRate SampleRate Methods AffectSignal(Span<IQ>, int) public override int AffectSignal(Span<IQ> signalTheta, int length) Parameters signalTheta Span<IQ> length int Returns int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing.Effects Classes BasicSignalScanningEffect DownSampleEffect DownSampleEffect removes extraneous information from your signal using your desired bandwidth. Example: an FM radio's band is around 200 kHz; the minimum sample rate required to represent this is 400 kS/s (400,000 samples per second). It is recommended that you reduce the sample rate of your audio signal this way before further signal processing to save CPU. FftEffect FrequencyCenteringEffect LowPassFilterEffect SignalEffect SquelchEffect"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.RadioBand.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.RadioBand.html",
    "title": "Class RadioBand | HackrfDotnet",
    "summary": "Class RadioBand Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing Assembly HackRFDotnet.dll public class RadioBand Inheritance object RadioBand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RadioBand(int) public RadioBand(int hz) Parameters hz int Properties Hz public int Hz { get; } Property Value int Khz public float Khz { get; } Property Value float Mhz public float Mhz { get; } Property Value float NyquistSampleRate public SampleRate NyquistSampleRate { get; } Property Value SampleRate Methods FromHz(int) public static RadioBand FromHz(int hz) Parameters hz int Returns RadioBand FromKHz(float) public static RadioBand FromKHz(float khz) Parameters khz float Returns RadioBand FromMHz(float) public static RadioBand FromMHz(float mhz) Parameters mhz float Returns RadioBand Operators operator +(RadioBand, RadioBand) public static RadioBand operator +(RadioBand a, RadioBand b) Parameters a RadioBand b RadioBand Returns RadioBand operator /(RadioBand, int) public static RadioBand operator /(RadioBand a, int b) Parameters a RadioBand b int Returns RadioBand operator ==(RadioBand, RadioBand) public static bool operator ==(RadioBand a, RadioBand b) Parameters a RadioBand b RadioBand Returns bool operator >(RadioBand, RadioBand) public static bool operator >(RadioBand a, RadioBand b) Parameters a RadioBand b RadioBand Returns bool operator >=(RadioBand, RadioBand) public static bool operator >=(RadioBand a, RadioBand b) Parameters a RadioBand b RadioBand Returns bool operator !=(RadioBand, RadioBand) public static bool operator !=(RadioBand a, RadioBand b) Parameters a RadioBand b RadioBand Returns bool operator <(RadioBand, RadioBand) public static bool operator <(RadioBand a, RadioBand b) Parameters a RadioBand b RadioBand Returns bool operator <=(RadioBand, RadioBand) public static bool operator <=(RadioBand a, RadioBand b) Parameters a RadioBand b RadioBand Returns bool operator %(RadioBand, RadioBand) public static RadioBand operator %(RadioBand a, RadioBand b) Parameters a RadioBand b RadioBand Returns RadioBand operator -(RadioBand, RadioBand) public static RadioBand operator -(RadioBand a, RadioBand b) Parameters a RadioBand b RadioBand Returns RadioBand operator -(RadioBand) public static RadioBand operator -(RadioBand a) Parameters a RadioBand Returns RadioBand"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.SampleRate.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.SampleRate.html",
    "title": "Class SampleRate | HackrfDotnet",
    "summary": "Class SampleRate Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing Assembly HackRFDotnet.dll public class SampleRate Inheritance object SampleRate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SampleRate(int) public SampleRate(int rate) Parameters rate int Properties Ksps public float Ksps { get; } Property Value float Msps public float Msps { get; } Property Value float NyquistFrequencyRange public RadioBand NyquistFrequencyRange { get; } Property Value RadioBand Sps public int Sps { get; } Property Value int Methods FromKSps(float) public static SampleRate FromKSps(float ksps) Parameters ksps float Returns SampleRate FromMSps(float) public static SampleRate FromMSps(float msps) Parameters msps float Returns SampleRate FromSps(int) public static SampleRate FromSps(int sps) Parameters sps int Returns SampleRate Operators operator +(SampleRate, SampleRate) public static SampleRate operator +(SampleRate a, SampleRate b) Parameters a SampleRate b SampleRate Returns SampleRate operator ==(SampleRate, SampleRate) public static bool operator ==(SampleRate a, SampleRate b) Parameters a SampleRate b SampleRate Returns bool operator >(SampleRate, SampleRate) public static bool operator >(SampleRate a, SampleRate b) Parameters a SampleRate b SampleRate Returns bool operator >=(SampleRate, SampleRate) public static bool operator >=(SampleRate a, SampleRate b) Parameters a SampleRate b SampleRate Returns bool operator !=(SampleRate, SampleRate) public static bool operator !=(SampleRate a, SampleRate b) Parameters a SampleRate b SampleRate Returns bool operator <(SampleRate, SampleRate) public static bool operator <(SampleRate a, SampleRate b) Parameters a SampleRate b SampleRate Returns bool operator <=(SampleRate, SampleRate) public static bool operator <=(SampleRate a, SampleRate b) Parameters a SampleRate b SampleRate Returns bool operator %(SampleRate, SampleRate) public static SampleRate operator %(SampleRate a, SampleRate b) Parameters a SampleRate b SampleRate Returns SampleRate operator -(SampleRate, SampleRate) public static SampleRate operator -(SampleRate a, SampleRate b) Parameters a SampleRate b SampleRate Returns SampleRate operator -(SampleRate) public static SampleRate operator -(SampleRate a) Parameters a SampleRate Returns SampleRate"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.SignalProcessingBuilder.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.SignalProcessingBuilder.html",
    "title": "Class SignalProcessingBuilder | HackrfDotnet",
    "summary": "Class SignalProcessingBuilder Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing Assembly HackRFDotnet.dll public class SignalProcessingBuilder Inheritance object SignalProcessingBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SignalProcessingBuilder() public SignalProcessingBuilder() Methods AddSignalEffect(SignalEffect) public SignalProcessingBuilder AddSignalEffect(SignalEffect signalEffect) Parameters signalEffect SignalEffect Returns SignalProcessingBuilder BuildPipeline() public SignalProcessingPipeline BuildPipeline() Returns SignalProcessingPipeline"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.SignalProcessingPipeline.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.SignalProcessingPipeline.html",
    "title": "Class SignalProcessingPipeline | HackrfDotnet",
    "summary": "Class SignalProcessingPipeline Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing Assembly HackRFDotnet.dll public class SignalProcessingPipeline Inheritance object SignalProcessingPipeline Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SignalProcessingPipeline(SignalEffect[]) public SignalProcessingPipeline(SignalEffect[] signalFxPipe) Parameters signalFxPipe SignalEffect[] Methods ApplyPipeline(Span<IQ>) public int ApplyPipeline(Span<IQ> signalTheta) Parameters signalTheta Span<IQ> Returns int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalProcessing.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Streams.SignalProcessing Classes RadioBand SampleRate SignalProcessingBuilder SignalProcessingPipeline"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue.AmSignalStream.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue.AmSignalStream.html",
    "title": "Class AmSignalStream | HackrfDotnet",
    "summary": "Class AmSignalStream Namespace HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue Assembly HackRFDotnet.dll public class AmSignalStream : WaveSignalStream, ISampleProvider, IDisposable Inheritance object SignalStream WaveSignalStream AmSignalStream Implements ISampleProvider IDisposable Inherited Members WaveSignalStream.WaveFormat WaveSignalStream.NormalizeRms(Span<float>, float) SignalStream.Center SignalStream.BandWidth SignalStream.SampleRate SignalStream._processingPipeline SignalStream._iQStream SignalStream._keepOpen SignalStream.ReadSpan(Span<IQ>) SignalStream.SetBand(RadioBand, RadioBand) SignalStream.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AmSignalStream(IIQStream, SampleRate, SignalProcessingPipeline?, bool) public AmSignalStream(IIQStream deviceStream, SampleRate sampleRate, SignalProcessingPipeline? processingPipeline = null, bool keepOpen = true) Parameters deviceStream IIQStream sampleRate SampleRate processingPipeline SignalProcessingPipeline keepOpen bool Methods Read(float[], int, int) Fill the specified buffer with 32 bit floating point samples public override int Read(float[] buffer, int offset, int count) Parameters buffer float[] The buffer to fill with samples. offset int Offset into buffer count int The number of samples to read Returns int the number of samples written to the buffer."
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue.FmSignalStream.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue.FmSignalStream.html",
    "title": "Class FmSignalStream | HackrfDotnet",
    "summary": "Class FmSignalStream Namespace HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue Assembly HackRFDotnet.dll public class FmSignalStream : WaveSignalStream, ISampleProvider, IDisposable Inheritance object SignalStream WaveSignalStream FmSignalStream Implements ISampleProvider IDisposable Inherited Members WaveSignalStream.WaveFormat WaveSignalStream.NormalizeRms(Span<float>, float) SignalStream.Center SignalStream.BandWidth SignalStream.SampleRate SignalStream._processingPipeline SignalStream._iQStream SignalStream._keepOpen SignalStream.ReadSpan(Span<IQ>) SignalStream.SetBand(RadioBand, RadioBand) SignalStream.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FmSignalStream(IIQStream, SampleRate, bool, SignalProcessingPipeline?, bool) public FmSignalStream(IIQStream deviceStream, SampleRate sampleRate, bool stereo = true, SignalProcessingPipeline? processingPipeline = null, bool keepOpen = true) Parameters deviceStream IIQStream sampleRate SampleRate stereo bool processingPipeline SignalProcessingPipeline keepOpen bool Methods Read(float[], int, int) Fill the specified buffer with 32 bit floating point samples public override int Read(float[] buffer, int offset, int count) Parameters buffer float[] The buffer to fill with samples. offset int Offset into buffer count int The number of samples to read Returns int the number of samples written to the buffer."
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue.WaveSignalStream.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue.WaveSignalStream.html",
    "title": "Class WaveSignalStream | HackrfDotnet",
    "summary": "Class WaveSignalStream Namespace HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue Assembly HackRFDotnet.dll public class WaveSignalStream : SignalStream, ISampleProvider, IDisposable Inheritance object SignalStream WaveSignalStream Implements ISampleProvider IDisposable Derived AmSignalStream FmSignalStream Inherited Members SignalStream.Center SignalStream.BandWidth SignalStream.SampleRate SignalStream._processingPipeline SignalStream._iQStream SignalStream._keepOpen SignalStream.ReadSpan(Span<IQ>) SignalStream.SetBand(RadioBand, RadioBand) SignalStream.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WaveSignalStream(IIQStream, SampleRate, bool, SignalProcessingPipeline?, bool) public WaveSignalStream(IIQStream deviceStream, SampleRate sampleRate, bool stero = true, SignalProcessingPipeline? processingPipeline = null, bool keepOpen = true) Parameters deviceStream IIQStream sampleRate SampleRate stero bool processingPipeline SignalProcessingPipeline keepOpen bool Properties WaveFormat Gets the WaveFormat of this Sample Provider. public WaveFormat? WaveFormat { get; protected set; } Property Value WaveFormat The wave format. Methods NormalizeRms(Span<float>, float) protected void NormalizeRms(Span<float> buffer, float targetRms = 0.04) Parameters buffer Span<float> targetRms float Read(float[], int, int) Fill the specified buffer with 32 bit floating point samples public virtual int Read(float[] buffer, int offset, int count) Parameters buffer float[] The buffer to fill with samples. offset int Offset into buffer count int The number of samples to read Returns int the number of samples written to the buffer."
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Streams.SignalStreams.Analogue Classes AmSignalStream FmSignalStream WaveSignalStream"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Digital.HdRadioSignalStream.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Digital.HdRadioSignalStream.html",
    "title": "Class HdRadioSignalStream | HackrfDotnet",
    "summary": "Class HdRadioSignalStream Namespace HackRFDotnet.ManagedApi.Streams.SignalStreams.Digital Assembly HackRFDotnet.dll public class HdRadioSignalStream : QpskSignalStream, IDisposable, ISampleProvider Inheritance object SignalStream QpskSignalStream HdRadioSignalStream Implements IDisposable ISampleProvider Inherited Members QpskSignalStream.Read(Span<byte>, int) SignalStream.Center SignalStream.BandWidth SignalStream.SampleRate SignalStream._processingPipeline SignalStream._iQStream SignalStream._keepOpen SignalStream.ReadSpan(Span<IQ>) SignalStream.SetBand(RadioBand, RadioBand) SignalStream.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HdRadioSignalStream(IIQStream, SampleRate, bool, SignalProcessingPipeline?, bool) public HdRadioSignalStream(IIQStream iQStream, SampleRate sampleRate, bool stereo = true, SignalProcessingPipeline? processingPipeline = null, bool keepOpen = true) Parameters iQStream IIQStream sampleRate SampleRate stereo bool processingPipeline SignalProcessingPipeline keepOpen bool Properties WaveFormat Gets the WaveFormat of this Sample Provider. public WaveFormat? WaveFormat { get; protected set; } Property Value WaveFormat The wave format. Methods Read(float[], int, int) Fill the specified buffer with 32 bit floating point samples public int Read(float[] buffer, int offset, int count) Parameters buffer float[] The buffer to fill with samples. offset int Offset into buffer count int The number of samples to read Returns int the number of samples written to the buffer."
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Digital.QpskSignalStream.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Digital.QpskSignalStream.html",
    "title": "Class QpskSignalStream | HackrfDotnet",
    "summary": "Class QpskSignalStream Namespace HackRFDotnet.ManagedApi.Streams.SignalStreams.Digital Assembly HackRFDotnet.dll public class QpskSignalStream : SignalStream, IDisposable Inheritance object SignalStream QpskSignalStream Implements IDisposable Derived HdRadioSignalStream Inherited Members SignalStream.Center SignalStream.BandWidth SignalStream.SampleRate SignalStream._processingPipeline SignalStream._iQStream SignalStream._keepOpen SignalStream.ReadSpan(Span<IQ>) SignalStream.SetBand(RadioBand, RadioBand) SignalStream.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QpskSignalStream(IIQStream, SignalProcessingPipeline?, bool) public QpskSignalStream(IIQStream iQStream, SignalProcessingPipeline? processingPipeline = null, bool keepOpen = true) Parameters iQStream IIQStream processingPipeline SignalProcessingPipeline keepOpen bool Methods Read(Span<byte>, int) public int Read(Span<byte> buffer, int count) Parameters buffer Span<byte> count int Returns int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Digital.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.Digital.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Streams.SignalStreams.Digital | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Streams.SignalStreams.Digital Classes HdRadioSignalStream QpskSignalStream"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.SignalStream.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.SignalStream.html",
    "title": "Class SignalStream | HackrfDotnet",
    "summary": "Class SignalStream Namespace HackRFDotnet.ManagedApi.Streams.SignalStreams Assembly HackRFDotnet.dll public class SignalStream : IDisposable Inheritance object SignalStream Implements IDisposable Derived WaveSignalStream QpskSignalStream Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SignalStream(IIQStream, SignalProcessingPipeline?, bool) public SignalStream(IIQStream iQStream, SignalProcessingPipeline? processingPipeline = null, bool keepOpen = true) Parameters iQStream IIQStream processingPipeline SignalProcessingPipeline keepOpen bool Fields _iQStream protected readonly IIQStream _iQStream Field Value IIQStream _keepOpen protected readonly bool _keepOpen Field Value bool _processingPipeline protected SignalProcessingPipeline? _processingPipeline Field Value SignalProcessingPipeline Properties BandWidth public RadioBand BandWidth { get; protected set; } Property Value RadioBand Center public RadioBand Center { get; protected set; } Property Value RadioBand SampleRate public SampleRate SampleRate { get; } Property Value SampleRate Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ReadSpan(Span<IQ>) public void ReadSpan(Span<IQ> iqPairs) Parameters iqPairs Span<IQ> SetBand(RadioBand, RadioBand) Set the band and bandwidth the filtering engine will use. public void SetBand(RadioBand center, RadioBand bandwidth) Parameters center RadioBand bandwidth RadioBand"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SignalStreams.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Streams.SignalStreams | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Streams.SignalStreams Classes SignalStream"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SweepingIQStream.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.SweepingIQStream.html",
    "title": "Class SweepingIQStream | HackrfDotnet",
    "summary": "Class SweepingIQStream Namespace HackRFDotnet.ManagedApi.Streams Assembly HackRFDotnet.dll public class SweepingIQStream Inheritance object SweepingIQStream Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SweepingIQStream() public SweepingIQStream()"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Streams.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Streams.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Streams | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Streams Classes SweepingIQStream Structs IQ InterleavedSample"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Utilities.BinaryUtilities.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Utilities.BinaryUtilities.html",
    "title": "Class BinaryUtilities | HackrfDotnet",
    "summary": "Class BinaryUtilities Namespace HackRFDotnet.ManagedApi.Utilities Assembly HackRFDotnet.dll public static class BinaryUtilities Inheritance object BinaryUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NextPowerOfTwo(int) public static int NextPowerOfTwo(int n) Parameters n int Returns int"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Utilities.SignalUtilities.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Utilities.SignalUtilities.html",
    "title": "Class SignalUtilities | HackrfDotnet",
    "summary": "Class SignalUtilities Namespace HackRFDotnet.ManagedApi.Utilities Assembly HackRFDotnet.dll public class SignalUtilities Inheritance object SignalUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ApplyFrequencyOffset(Span<IQ>, RadioBand, SampleRate) public static void ApplyFrequencyOffset(Span<IQ> iqFrame, RadioBand freqOffset, SampleRate sampleRate) Parameters iqFrame Span<IQ> freqOffset RadioBand sampleRate SampleRate CalculateRmsDb(ReadOnlySpan<IQ>) public static float CalculateRmsDb(ReadOnlySpan<IQ> iqFrame) Parameters iqFrame ReadOnlySpan<IQ> Returns float CalculateSignalDb(ReadOnlySpan<IQ>) public static float CalculateSignalDb(ReadOnlySpan<IQ> iqFrame) Parameters iqFrame ReadOnlySpan<IQ> Returns float FrequencyResolution(int, SampleRate, bool) public static int FrequencyResolution(int length, SampleRate sampleRate, bool positiveOnly = true) Parameters length int sampleRate SampleRate positiveOnly bool Returns int IQCorrection(Span<IQ>) public static void IQCorrection(Span<IQ> iqFrame) Parameters iqFrame Span<IQ>"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.Utilities.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.Utilities.html",
    "title": "Namespace HackRFDotnet.ManagedApi.Utilities | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi.Utilities Classes BinaryUtilities SignalUtilities"
  },
  "_githubPages/api/HackRFDotnet.ManagedApi.html": {
    "href": "_githubPages/api/HackRFDotnet.ManagedApi.html",
    "title": "Namespace HackRFDotnet.ManagedApi | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.ManagedApi Classes DigitalRadioDevice"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Enums.Peripherals.LedState.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Enums.Peripherals.LedState.html",
    "title": "Enum LedState | HackrfDotnet",
    "summary": "Enum LedState Namespace HackRFDotnet.NativeApi.Enums.Peripherals Assembly HackRFDotnet.dll public enum LedState : byte Fields RxLight = 2 TxLight = 4 UsbLight = 0"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Enums.Peripherals.OperacakePorts.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Enums.Peripherals.OperacakePorts.html",
    "title": "Enum OperacakePorts | HackrfDotnet",
    "summary": "Enum OperacakePorts Namespace HackRFDotnet.NativeApi.Enums.Peripherals Assembly HackRFDotnet.dll public enum OperacakePorts Fields OPERACAKE_PA1 = 0 OPERACAKE_PA2 = 1 OPERACAKE_PA3 = 2 OPERACAKE_PA4 = 3 OPERACAKE_PB1 = 4 OPERACAKE_PB2 = 5 OPERACAKE_PB3 = 6 OPERACAKE_PB4 = 7"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Enums.Peripherals.OperacakeSwitchingMode.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Enums.Peripherals.OperacakeSwitchingMode.html",
    "title": "Enum OperacakeSwitchingMode | HackrfDotnet",
    "summary": "Enum OperacakeSwitchingMode Namespace HackRFDotnet.NativeApi.Enums.Peripherals Assembly HackRFDotnet.dll public enum OperacakeSwitchingMode Fields OPERACAKE_MODE_FREQUENCY = 1 OPERACAKE_MODE_MANUAL = 0 OPERACAKE_MODE_TIME = 2"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Enums.Peripherals.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Enums.Peripherals.html",
    "title": "Namespace HackRFDotnet.NativeApi.Enums.Peripherals | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.NativeApi.Enums.Peripherals Enums LedState OperacakePorts OperacakeSwitchingMode"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Enums.RfPathFilter.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Enums.RfPathFilter.html",
    "title": "Enum RfPathFilter | HackrfDotnet",
    "summary": "Enum RfPathFilter Namespace HackRFDotnet.NativeApi.Enums Assembly HackRFDotnet.dll public enum RfPathFilter Fields RF_PATH_FILTER_BYPASS = 0 RF_PATH_FILTER_HIGH_PASS = 2 RF_PATH_FILTER_LOW_PASS = 1"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Enums.SweepStyle.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Enums.SweepStyle.html",
    "title": "Enum SweepStyle | HackrfDotnet",
    "summary": "Enum SweepStyle Namespace HackRFDotnet.NativeApi.Enums Assembly HackRFDotnet.dll public enum SweepStyle Fields INTERLEAVED = 1 LINEAR = 0"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Enums.System.HackrfBoardId.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Enums.System.HackrfBoardId.html",
    "title": "Enum HackrfBoardId | HackrfDotnet",
    "summary": "Enum HackrfBoardId Namespace HackRFDotnet.NativeApi.Enums.System Assembly HackRFDotnet.dll public enum HackrfBoardId Fields BOARD_ID_HACKRF1_OG = 2 BOARD_ID_HACKRF1_R9 = 4 BOARD_ID_JAWBREAKER = 1 BOARD_ID_JELLYBEAN = 0 BOARD_ID_RAD1O = 3 BOARD_ID_UNDETECTED = 255 BOARD_ID_UNRECOGNIZED = 254"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Enums.System.HackrfBoardRev.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Enums.System.HackrfBoardRev.html",
    "title": "Enum HackrfBoardRev | HackrfDotnet",
    "summary": "Enum HackrfBoardRev Namespace HackRFDotnet.NativeApi.Enums.System Assembly HackRFDotnet.dll public enum HackrfBoardRev Fields BOARD_REV_GSG_HACKRF1_R10 = 133 BOARD_REV_GSG_HACKRF1_R6 = 129 BOARD_REV_GSG_HACKRF1_R7 = 130 BOARD_REV_GSG_HACKRF1_R8 = 131 BOARD_REV_GSG_HACKRF1_R9 = 132 BOARD_REV_HACKRF1_OLD = 0 BOARD_REV_HACKRF1_R10 = 5 BOARD_REV_HACKRF1_R6 = 1 BOARD_REV_HACKRF1_R7 = 2 BOARD_REV_HACKRF1_R8 = 3 BOARD_REV_HACKRF1_R9 = 4 BOARD_REV_UNDETECTED = 255 BOARD_REV_UNRECOGNIZED = 254"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Enums.System.HackrfError.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Enums.System.HackrfError.html",
    "title": "Enum HackrfError | HackrfDotnet",
    "summary": "Enum HackrfError Namespace HackRFDotnet.NativeApi.Enums.System Assembly HackRFDotnet.dll public enum HackrfError Fields HACKRF_ERROR_BUSY = -6 HACKRF_ERROR_INVALID_PARAM = -2 HACKRF_ERROR_LIBUSB = -1000 HACKRF_ERROR_NOT_FOUND = -5 HACKRF_ERROR_NOT_LAST_DEVICE = -2000 HACKRF_ERROR_NO_MEM = -11 HACKRF_ERROR_OTHER = -9999 HACKRF_ERROR_STREAMING_EXIT_CALLED = -1004 HACKRF_ERROR_STREAMING_STOPPED = -1003 HACKRF_ERROR_STREAMING_THREAD_ERR = -1002 HACKRF_ERROR_THREAD = -1001 HACKRF_ERROR_USB_API_VERSION = -1005 HACKRF_SUCCESS = 0 HACKRF_TRUE = 1"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Enums.System.HackrfUsbBoardId.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Enums.System.HackrfUsbBoardId.html",
    "title": "Enum HackrfUsbBoardId | HackrfDotnet",
    "summary": "Enum HackrfUsbBoardId Namespace HackRFDotnet.NativeApi.Enums.System Assembly HackRFDotnet.dll public enum HackrfUsbBoardId Fields USB_BOARD_ID_HACKRF_ONE = 24713 USB_BOARD_ID_INVALID = 65535 USB_BOARD_ID_JAWBREAKER = 24651 USB_BOARD_ID_RAD1O = 52245"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Enums.System.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Enums.System.html",
    "title": "Namespace HackRFDotnet.NativeApi.Enums.System | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.NativeApi.Enums.System Enums HackrfBoardId HackrfBoardRev HackrfError HackrfUsbBoardId"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Enums.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Enums.html",
    "title": "Namespace HackRFDotnet.NativeApi.Enums | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.NativeApi.Enums Enums RfPathFilter SweepStyle"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Debug.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Debug.html",
    "title": "Class HackRfNativeLib.Debug | HackrfDotnet",
    "summary": "Class HackRfNativeLib.Debug Namespace HackRFDotnet.NativeApi.Lib Assembly HackRFDotnet.dll public static class HackRfNativeLib.Debug Inheritance object HackRfNativeLib.Debug Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetErrorName(HackrfError) Convert @ref hackrf_error into human-readable string public static extern sbyte* GetErrorName(HackrfError errcode) Parameters errcode HackrfError Returns sbyte*"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.html",
    "title": "Class HackRfNativeLib.DeviceStreaming | HackrfDotnet",
    "summary": "Class HackRfNativeLib.DeviceStreaming Namespace HackRFDotnet.NativeApi.Lib Assembly HackRFDotnet.dll public static class HackRfNativeLib.DeviceStreaming Inheritance object HackRfNativeLib.DeviceStreaming Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ComputeBasebandFilterBandWidth(uint) Compute nearest valid baseband filter bandwidth to specified value The result can be used via @ref hackrf_set_baseband_filter_bandwidth @param bandwidth_hz desired filter bandwidth in Hz @return nearest valid filter bandwidth in Hz @ingroup configuration public static extern uint ComputeBasebandFilterBandWidth(uint bandwidth_hz) Parameters bandwidth_hz uint Returns uint ComputeBasebandFilterBandWidth_round_down_lt(uint) Compute nearest valid baseband filter bandwidth lower than a specified value The result can be used via @ref hackrf_set_baseband_filter_bandwidth @param bandwidth_hz desired filter bandwidth in Hz @return the highest valid filter bandwidth lower than @p bandwidth_hz in Hz @ingroup configuration public static extern uint ComputeBasebandFilterBandWidth_round_down_lt(uint bandwidth_hz) Parameters bandwidth_hz uint Returns uint EnableAmp(HackRFDevice*, byte) Enable/disable 14dB RF amplifier Enable / disable the ~11dB RF RX/TX amplifiers U13/U25 via controlling switches U9 and U14. @param device device to configure @param value enable(1) or disable(0) amplifier @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup configuration public static extern int EnableAmp(HackRFDevice* device, byte value) Parameters device HackRFDevice* value byte Returns int EnableAntenna(HackRFDevice*, byte) Enable or disable the 3.3V (max 50mA) bias-tee (antenna port power). Defaults to disabled. NOTE: the firmware auto-disables this after returning to IDLE mode, so a perma-set is not possible, which means all software supporting HackRF devices must support enabling bias-tee, as setting it externally is not possible like it is with RTL-SDR for example. public static extern int EnableAntenna(HackRFDevice* device, byte value) Parameters device HackRFDevice* value byte Returns int EnableTxFlush(HackRFDevice*, HackRFFlushCallback, void*) Setup flush(end-of-transmission) callback This callback will be called when all the data was transmitted and all data transfers were completed.First parameter is supplied context, second parameter is success flag. @param device device to configure @param callback callback to call when all transfers were completed @param flush_ctx context (1st parameter of callback) @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup streaming public static extern int EnableTxFlush(HackRFDevice* device, HackRFFlushCallback callback, void* flush_ctx) Parameters device HackRFDevice* callback HackRFFlushCallback flush_ctx void* Returns int FilterPathName(RfPathFilter) RF filter path setting enum Used only when performing explicit tuning using @ref hackrf_set_freq_explicit, or can be converted into a human readable string using @ref hackrf_filter_path_name. This can select the image rejection filter(U3, U8 or none) to use - using switches U5, U6, U9 and U11.When no filter is selected, the mixer itself is bypassed. @ingroup configuration public static extern sbyte* FilterPathName(RfPathFilter path) Parameters path RfPathFilter Returns sbyte* GetTransferBufferSize(HackRFDevice*) Get USB transfer buffer size. public static extern nuint GetTransferBufferSize(HackRFDevice* device) Parameters device HackRFDevice* Returns nuint GetTransferQueueDepth(HackRFDevice*) Get the total number of USB transfer buffers public static extern uint GetTransferQueueDepth(HackRFDevice* device) Parameters device HackRFDevice* Returns uint InitSweep(HackRFDevice*, ushort*, int, uint, uint, uint, SweepStyle) Initialize sweep mode In this mode, in a single data transfer(single call to the RX transfer callback), multiple blocks of size @p num_bytes bytes are received with different center frequencies.At the beginning of each block, a 10-byte frequency header is present in 0x7F - 0x7F - uint64_t frequency(LSBFIRST, in Hz) format, followed by the actual samples. Requires USB API version 0x0102 or above! @param device device to configure @param frequency_list list of start-stop frequency pairs in MHz @param num_ranges length of array @p frequency_list(in pairs, so total array length / 2!). Must be less than @ref MAX_SWEEP_RANGES @param num_bytes number of bytes to capture per tuning, must be a multiple of @ref BYTES_PER_BLOCK @param step_width width of each tuning step in Hz @param offset frequency offset added to tuned frequencies.sample_rate / 2 is a good value @param style sweep style @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup streaming public static extern int InitSweep(HackRFDevice* device, ushort* frequency_list, int num_ranges, uint num_bytes, uint step_width, uint offset, SweepStyle style) Parameters device HackRFDevice* frequency_list ushort* num_ranges int num_bytes uint step_width uint offset uint style SweepStyle Returns int IsStreaming(HackRFDevice*) Query device streaming status @param device device to query @return @ref HACKRF_TRUE if the device is streaming, else one of @ref HACKRF_ERROR_STREAMING_THREAD_ERR, @ref HACKRF_ERROR_STREAMING_STOPPED or @ref HACKRF_ERROR_STREAMING_EXIT_CALLED @ingroup streaming public static extern int IsStreaming(HackRFDevice* device) Parameters device HackRFDevice* Returns int SetBasebandFilterBandwidth(HackRFDevice*, uint) Set baseband filter bandwidth Possible values: 1.75, 2.5, 3.5, 5, 5.5, 6, 7, 8, 9, 10, 12, 14, 15, 20, 24, 28MHz, default \\f$ \\le 0.75 \\cdot F_s \\f$ The functions @ref hackrf_compute_baseband_filter_bw and @ref hackrf_compute_baseband_filter_bw_round_down_lt can be used to get a valid value nearest to a given value. Setting the sample rate causes the filter bandwidth to be (re)set to its default \\f$ \\le 0.75 \\cdot F_s \\f$ value, so setting sample rate should be done before setting filter bandwidth. @param device device to configure @param bandwidth_hz baseband filter bandwidth in Hz @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup configuration public static extern int SetBasebandFilterBandwidth(HackRFDevice* device, uint bandwidth_hz) Parameters device HackRFDevice* bandwidth_hz uint Returns int SetBiasTOptions(HackRFDevice*, HackRFBiasTUserSettingReq*) Configure bias tee behavior of the HackRF device when changing RF states This function allows the user to configure bias tee behavior so that it can be turned on or off automatically by the HackRF when entering the RX, TX, or OFF state. By default, the HackRF switches off the bias tee when the RF path switches to OFF mode. The bias tee configuration is specified via a bitfield: 0000000TmmRmmOmm Where setting T/R/O bits indicates that the TX/RX/Off behavior should be set to mode 'mm', 0=don't modify mm specifies the bias tee mode: 00 - do nothing 01 - reserved, do not use 10 - disable bias tee 11 - enable bias tee public static extern int SetBiasTOptions(HackRFDevice* device, HackRFBiasTUserSettingReq* req) Parameters device HackRFDevice* req HackRFBiasTUserSettingReq* Returns int SetClockSampleRate(HackRFDevice*, uint, uint) public static extern int SetClockSampleRate(HackRFDevice* device, uint freq_hz, uint divider) Parameters device HackRFDevice* freq_hz uint divider uint Returns int SetFrequency(HackRFDevice*, ulong) Set the center frequency Simple(auto) tuning via specifying a center frequency in Hz This setting is not exact and depends on the PLL settings.Exact resolution is not determined, but the actual tuned frequency will be queryable in the future. @param device device to tune @param freq_hz center frequency in Hz.Defaults to 900MHz.Should be in range 1-6000MHz, but 0-7250MHz is possible.The resolution is ~50Hz, I could not find the exact number. @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup configuration public static extern int SetFrequency(HackRFDevice* device, ulong freq_hz) Parameters device HackRFDevice* freq_hz ulong Returns int SetFrequency(HackRFDevice*, ulong, ulong, RfPathFilter) Set the center frequency via explicit tuning Center frequency is set to \\f$f_{center} = f_{IF k\\cdot f_ { LO }\\f$ where \\f$k\\in\\left{-1; 0; 1\\right}\\f$, depending on the value of @p path. See the documentation of @ref rf_path_filter for details @param device device to tune @param if_freq_hz tuning frequency of the MAX2837 transceiver IC in Hz. Must be in the range of 2150-2750MHz @param lo_freq_hz tuning frequency of the RFFC5072 mixer/synthesizer IC in Hz. Must be in the range 84.375-5400MHz, defaults to 1000MHz. No effect if @p path is set to @ref RF_PATH_FILTER_BYPASS @param path filter path for mixer. See the documentation for @ref rf_path_filter for details @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup configuration public static extern int SetFrequency(HackRFDevice* device, ulong if_freq_hz, ulong lo_freq_hz, RfPathFilter path) Parameters device HackRFDevice* if_freq_hz ulong lo_freq_hz ulong path RfPathFilter Returns int SetLnaGain(HackRFDevice*, uint) Set the RF RX gain of the MAX2837 transceiver IC (\"IF\" gain setting) in decibels. Must be in range 0-40dB, with 8dB steps. public static extern int SetLnaGain(HackRFDevice* device, uint value) Parameters device HackRFDevice* value uint Returns int SetRxOverrunLimit(HackRFDevice*, uint) Set receive overrun limit When this limit is set, after the specified number of samples (bytes, not whole IQ pairs) missing the device will automatically return to IDLE mode, thus stopping operation. Useful for handling cases like program/computer crashes or other problems. The default value 0 means no limit. Requires USB API version 0x0106 or above! @param device device to configure @param value number of samples to wait before auto-stopping @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup streaming public static extern int SetRxOverrunLimit(HackRFDevice* device, uint value) Parameters device HackRFDevice* value uint Returns int SetSampleRate(HackRFDevice*, double) public static extern int SetSampleRate(HackRFDevice* device, double freq_hz) Parameters device HackRFDevice* freq_hz double Returns int SetTxBlockCompleteCallback(HackRFDevice*, HackRFTxBlockCompleteCallback) Setup callback to be called when an USB transfer is completed. This callback will be called whenever an USB transfer to the device is completed, regardless if it was successful or not(indicated by the second parameter). @param device device to configure @param callback callback to call when a transfer is completed @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup streaming public static extern int SetTxBlockCompleteCallback(HackRFDevice* device, HackRFTxBlockCompleteCallback callback) Parameters device HackRFDevice* callback HackRFTxBlockCompleteCallback Returns int SetTxUnderrunLimit(HackRFDevice*, uint) Set transmit underrun limit When this limit is set, after the specified number of samples (bytes, not whole IQ pairs) missing the device will automatically return to IDLE mode, thus stopping operation. Useful for handling cases like program/computer crashes or other problems. The default value 0 means no limit. Requires USB API version 0x0106 or above! @param device device to configure @param value number of samples to wait before auto-stopping @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup streaming public static extern int SetTxUnderrunLimit(HackRFDevice* device, uint value) Parameters device HackRFDevice* value uint Returns int SetTxVgaGain(HackRFDevice*, uint) Set RF TX gain of the MAX2837 transceiver IC (\"IF\" or \"VGA\" gain setting) in decibels. Must be in range 0-47dB in 1dB steps. public static extern int SetTxVgaGain(HackRFDevice* device, uint value) Parameters device HackRFDevice* value uint Returns int SetVgaGain(HackRFDevice*, uint) Set baseband RX gain of the MAX2837 transceiver IC (\"BB\" or \"VGA\" gain setting) in decibels. Must be in range 0-62dB with 2dB steps. public static extern int SetVgaGain(HackRFDevice* device, uint value) Parameters device HackRFDevice* value uint Returns int StartRx(HackRFDevice*, HackRFSampleBlockCallback, void*) Start receiving Should be called after setting gains, frequency and sampling rate, as these values won't get reset but instead keep their last value, thus their state is unknown. The callback is called with a @ref hackrf_transfer object whenever the buffer is full. The callback is called in an async context so no libhackrf functions should be called from it. The callback should treat its argument as read-only. @param device device to configure @param callback rx_callback @param rx_ctx User provided RX context. Not used by the library, but available to @p callback as @ref hackrf_transfer.rx_ctx. @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup streaming public static extern int StartRx(HackRFDevice* device, HackRFSampleBlockCallback callback, void* rx_ctx) Parameters device HackRFDevice* callback HackRFSampleBlockCallback rx_ctx void* Returns int StartRxSweep(HackRFDevice*, HackRFSampleBlockCallback, void*) Start RX sweep See @ref hackrf_init_sweep for more info Requires USB API version 0x0104 or above! @param device device to start sweeping @param callback rx callback processing the received data @param rx_ctx User provided RX context.Not used by the library, but available to @p callback as @ref hackrf_transfer.rx_ctx. @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup streaming public static extern int StartRxSweep(HackRFDevice* device, HackRFSampleBlockCallback callback, void* rx_ctx) Parameters device HackRFDevice* callback HackRFSampleBlockCallback rx_ctx void* Returns int StartTx(HackRFDevice*, HackRFSampleBlockCallback, void*) ⚠️ Warning: Transmitting radio signals may be subject to national and international regulations. Use of this function without the appropriate license or authorization may violate FCC regulations (or equivalent regulatory authorities in your region) and could result in legal penalties. public static extern int StartTx(HackRFDevice* device, HackRFSampleBlockCallback callback, void* tx_ctx) Parameters device HackRFDevice* callback HackRFSampleBlockCallback tx_ctx void* Returns int StopRx(HackRFDevice*) Stop receiving @param device device to stop RX on @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup streaming public static extern int StopRx(HackRFDevice* device) Parameters device HackRFDevice* Returns int StopTx(HackRFDevice*) Stop transmission @param device device to stop TX on @return @ref HACKRF_SUCCESS on success or @ref hackrf_error variant @ingroup streaming public static extern int StopTx(HackRFDevice* device) Parameters device HackRFDevice* Returns int"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.html",
    "title": "Class HackRfNativeLib.Devices | HackrfDotnet",
    "summary": "Class HackRfNativeLib.Devices Namespace HackRFDotnet.NativeApi.Lib Assembly HackRFDotnet.dll public static class HackRfNativeLib.Devices Inheritance object HackRfNativeLib.Devices Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CloseDevice(HackRFDevice*) Close a previously opened device public static extern int CloseDevice(HackRFDevice* device) Parameters device HackRFDevice* Returns int DeviceListFree(HackRFDeviceList*) Free a previously allocated @ref hackrf_device_list list. public static extern void DeviceListFree(HackRFDeviceList* list) Parameters list HackRFDeviceList* DeviceListOpen(HackRFDeviceList*, int, HackRFDevice**) Open a @ref hackrf_device from a device list public static extern int DeviceListOpen(HackRFDeviceList* list, int idx, HackRFDevice** device) Parameters list HackRFDeviceList* idx int device HackRFDevice** Returns int OpenDevice(HackRFDevice**) Open first available HackRF device public static extern int OpenDevice(HackRFDevice** device) Parameters device HackRFDevice** Returns int OpenDeviceBySerial(string, HackRFDevice**) Open HackRF device by serial number public static extern int OpenDeviceBySerial(string desired_serial_number, HackRFDevice** device) Parameters desired_serial_number string device HackRFDevice** Returns int QueryDeviceList() List connected HackRF devices public static extern HackRFDeviceList* QueryDeviceList() Returns HackRFDeviceList* ResetDevice(HackRFDevice*) Reset HackRF device public static extern int ResetDevice(HackRFDevice* device) Parameters device HackRFDevice* Returns int SetDeviceLeds(HackRFDevice*, byte) Turn on or off (override) the LEDs of the HackRF device This function can turn on or off the LEDs of the device. There are 3 controllable LEDs on the HackRF one: USB, RX and TX. On the Rad1o, there are 4 LEDs. Each LED can be set individually, but the setting might get overridden by other functions. The LEDs can be set via specifying them as bits of a 8 bit number @p state, bit 0 representing the first (USB on the HackRF One) and bit 3 or 4 representing the last LED. The upper 4 or 5 bits are unused. For example, binary value 0bxxxxx101 turns on the USB and TX LEDs on the HackRF One. public static extern int SetDeviceLeds(HackRFDevice* device, byte state) Parameters device HackRFDevice* state byte Returns int SetDeviceUiEnabled(HackRFDevice*, byte) Enable / disable UI display (RAD1O, PortaPack, etc.) Enable or disable the display on display-enabled devices (Rad1o, PortaPack) public static extern int SetDeviceUiEnabled(HackRFDevice* device, byte value) Parameters device HackRFDevice* value byte Returns int"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.html",
    "title": "Class HackRfNativeLib.Firmware | HackrfDotnet",
    "summary": "Class HackRfNativeLib.Firmware Namespace HackRFDotnet.NativeApi.Lib Assembly HackRFDotnet.dll public static class HackRfNativeLib.Firmware Inheritance object HackRfNativeLib.Firmware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BoardIdName(HackrfBoardId) Convert @ref hackrf_board_id into human-readable string public static extern sbyte* BoardIdName(HackrfBoardId board_id) Parameters board_id HackrfBoardId Returns sbyte* BoardRevName(HackrfBoardRev) Convert board revision name public static extern nint BoardRevName(HackrfBoardRev board_rev) Parameters board_rev HackrfBoardRev Returns nint ClearSpiflashStatus(HackRFDevice*) Clear the status registers of the W25Q80BV SPI flash chip See the datasheet for details of the status registers. public static extern int ClearSpiflashStatus(HackRFDevice* device) Parameters device HackRFDevice* Returns int EraseSpiflash(HackRFDevice*) Erase firmware image on the SPI flash Should be followed by writing a new image, or the HackRF will be soft-bricked (still rescuable in DFU mode) public static extern int EraseSpiflash(HackRFDevice* device) Parameters device HackRFDevice* Returns int GetClkinStatus(HackRFDevice*, byte*) Get CLKIN status Check if an external clock signal is detected on the CLKIN port. public static extern int GetClkinStatus(HackRFDevice* device, byte* status) Parameters device HackRFDevice* status byte* Returns int GetMcuState(HackRFDevice*, HackRFM0State*) Get the state of the M0 code on the LPC43xx MCU public static extern int GetMcuState(HackRFDevice* device, HackRFM0State* value) Parameters device HackRFDevice* value HackRFM0State* Returns int LookupBoardIdPlatform(HackrfBoardId) Lookup platform ID (HACKRF_PLATFORM_xxx) from board id (@ref hackrf_board_id) public static extern uint LookupBoardIdPlatform(HackrfBoardId board_id) Parameters board_id HackrfBoardId Returns uint ReadBoardId(HackRFDevice*, byte*) Read @ref hackrf_board_id from a device The result can be converted into a human-readable string via @ref hackrf_board_id_name public static extern int ReadBoardId(HackRFDevice* device, byte* value) Parameters device HackRFDevice* value byte* Returns int ReadBoardPartIdSerialNo(HackRFDevice*, ReadPartidSerialNo*) Read board part ID and serial number Read MCU part id and serial number. See the documentation of the MCU for details! public static extern int ReadBoardPartIdSerialNo(HackRFDevice* device, ReadPartidSerialNo* read_partid_serialno) Parameters device HackRFDevice* read_partid_serialno ReadPartidSerialNo* Returns int ReadBoardRev(HackRFDevice*, byte*) Read board revision of device public static extern int ReadBoardRev(HackRFDevice* device, byte* value) Parameters device HackRFDevice* value byte* Returns int ReadMax2837(HackRFDevice*, byte, ushort*) Directly read the registers of the MAX2837 transceiver IC, Intended for debugging purposes only! public static extern int ReadMax2837(HackRFDevice* device, byte register_number, ushort* value) Parameters device HackRFDevice* register_number byte value ushort* Returns int ReadRffc5071(HackRFDevice*, byte, ushort*) Directly read the registers of the RFFC5071/5072 mixer-synthesizer IC Intended for debugging purposes only! public static extern int ReadRffc5071(HackRFDevice* device, byte register_number, ushort* value) Parameters device HackRFDevice* register_number byte value ushort* Returns int ReadSi5351c(HackRFDevice*, ushort, ushort*) Directly read the registers of the Si5351C clock generator IC Intended for debugging purposes only! public static extern int ReadSi5351c(HackRFDevice* device, ushort register_number, ushort* value) Parameters device HackRFDevice* register_number ushort value ushort* Returns int ReadSpiflash(HackRFDevice*, uint, ushort, byte*) Read firmware image on the SPI flash Should only be used for firmware verification. public static extern int ReadSpiflash(HackRFDevice* device, uint address, ushort length, byte* data) Parameters device HackRFDevice* address uint length ushort data byte* Returns int ReadSupportedPlatform(HackRFDevice*, uint*) Read supported platform of device Returns a combination of @ref HACKRF_PLATFORM_JAWBREAKER | @ref HACKRF_PLATFORM_HACKRF1_OG | @ref HACKRF_PLATFORM_RAD1O | @ref HACKRF_PLATFORM_HACKRF1_R9 public static extern int ReadSupportedPlatform(HackRFDevice* device, uint* value) Parameters device HackRFDevice* value uint* Returns int ReadUsbApiVersion(HackRFDevice*, ushort*) Read version as MM.mm 16-bit value, where MM is the major and mm is the minor version, encoded as the hex digits of the 16-bit number. public static extern int ReadUsbApiVersion(HackRFDevice* device, ushort* version) Parameters device HackRFDevice* version ushort* Returns int ReadVersion(HackRFDevice*, byte*, byte) Read HackRF firmware version as a string public static extern int ReadVersion(HackRFDevice* device, byte* version, byte length) Parameters device HackRFDevice* version byte* length byte Returns int SetClkoutEnable(HackRFDevice*, byte) Enable / disable CLKOUT public static extern int SetClkoutEnable(HackRFDevice* device, byte value) Parameters device HackRFDevice* value byte Returns int SetHardwareSyncMode(HackRFDevice*, byte) Set hardware sync mode (hardware triggering) See the documentation on hardware triggering for details public static extern int SetHardwareSyncMode(HackRFDevice* device, byte value) Parameters device HackRFDevice* value byte Returns int SpiflashStatus(HackRFDevice*, byte*) Read the status registers of the W25Q80BV SPI flash chip See the datasheet for details of the status registers. The two registers are read in order. public static extern int SpiflashStatus(HackRFDevice* device, byte* data) Parameters device HackRFDevice* data byte* Returns int UsbBoardIdName(HackrfUsbBoardId) Convert @ref hackrf_usb_board_id into human-readable string. public static extern sbyte* UsbBoardIdName(HackrfUsbBoardId usb_board_id) Parameters usb_board_id HackrfUsbBoardId Returns sbyte* WriteCpld(HackRFDevice*, byte*, uint) Write configuration bitstream into the XC2C64A-7VQ100C CPLD device will need to be reset after hackrf_cpld_write public static extern int WriteCpld(HackRFDevice* device, byte* data, uint total_length) Parameters device HackRFDevice* data byte* total_length uint Returns int WriteRffc5071(HackRFDevice*, byte, ushort) Directly write the registers of the RFFC5071/5072 mixer-synthesizer IC Intended for debugging purposes only! public static extern int WriteRffc5071(HackRFDevice* device, byte register_number, ushort value) Parameters device HackRFDevice* register_number byte value ushort Returns int WriteSi5351c(HackRFDevice*, ushort, ushort) Directly write the registers of the Si5351 clock generator IC Intended for debugging purposes only! public static extern int WriteSi5351c(HackRFDevice* device, ushort register_number, ushort value) Parameters device HackRFDevice* register_number ushort value ushort Returns int WriteSpiflash(HackRFDevice*, uint, ushort, byte*) Write firmware image on the SPI flash Should only be used for firmware updating. Can brick the device, but it's still rescuable in DFU mode. public static extern int WriteSpiflash(HackRFDevice* device, uint address, ushort length, byte* data) Parameters device HackRFDevice* address uint length ushort data byte* Returns int hackrf_max2837_write(HackRFDevice*, byte, ushort) Directly write the registers of the MAX2837 transceiver IC Intended for debugging purposes only! public static extern int hackrf_max2837_write(HackRFDevice* device, byte register_number, ushort value) Parameters device HackRFDevice* register_number byte value ushort Returns int"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.html",
    "title": "Class HackRfNativeLib.Operacake | HackrfDotnet",
    "summary": "Class HackRfNativeLib.Operacake Namespace HackRFDotnet.NativeApi.Lib Assembly HackRFDotnet.dll public static class HackRfNativeLib.Operacake Inheritance object HackRfNativeLib.Operacake Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetOperacakeBoards(HackRFDevice*, byte*) Query connected Opera Cake boards Returns a @ref HACKRF_OPERACAKE_MAX_BOARDS size array of addresses, with @ref HACKRF_OPERACAKE_ADDRESS_INVALID as a placeholder public static extern int GetOperacakeBoards(HackRFDevice* device, byte* boards) Parameters device HackRFDevice* boards byte* Returns int GetOperacakeMode(HackRFDevice*, byte, OperacakeSwitchingMode*) Query Opera Cake mode public static extern int GetOperacakeMode(HackRFDevice* device, byte address, OperacakeSwitchingMode* mode) Parameters device HackRFDevice* address byte mode OperacakeSwitchingMode* Returns int OperacakeGpioTest(HackRFDevice*, byte, ushort*) Perform GPIO test on an Opera Cake addon board Value 0xFFFF means \"GPIO mode disabled\", and hackrf_operacake advises to remove additional add-on boards and retry. Value 0 means all tests passed. In any other values, a 1 bit signals an error. Bits are grouped in groups of 3. Encoding: 0 - u1ctrl - u3ctrl0 - u3ctrl1 - u2ctrl0 - u2ctrl1 public static extern int OperacakeGpioTest(HackRFDevice* device, byte address, ushort* test_result) Parameters device HackRFDevice* address byte test_result ushort* Returns int SetOperacakeDwellTimes(HackRFDevice*, HackRFOperacakeDwellTime*, byte) Setup Opera Cake dwell times in @ref OPERACAKE_MODE_TIME mode operation Should be called after @ref hackrf_set_operacake_mode Note: this configuration applies to all Opera Cake boards in @ref OPERACAKE_MODE_TIME mode public static extern int SetOperacakeDwellTimes(HackRFDevice* device, HackRFOperacakeDwellTime* dwell_times, byte count) Parameters device HackRFDevice* dwell_times HackRFOperacakeDwellTime* count byte Returns int SetOperacakeFrequencyRanges(HackRFDevice*, HackRFOperacakeFreqRange*, byte) Setup Opera Cake frequency ranges in @ref OPERACAKE_MODE_FREQUENCY mode operation Should be called after @ref hackrf_set_operacake_mode Note: this configuration applies to all Opera Cake boards in @ref OPERACAKE_MODE_FREQUENCY mode public static extern int SetOperacakeFrequencyRanges(HackRFDevice* device, HackRFOperacakeFreqRange* freq_ranges, byte count) Parameters device HackRFDevice* freq_ranges HackRFOperacakeFreqRange* count byte Returns int SetOperacakeMode(HackRFDevice*, byte, OperacakeSwitchingMode) Setup Opera Cake operation mode public static extern int SetOperacakeMode(HackRFDevice* device, byte address, OperacakeSwitchingMode mode) Parameters device HackRFDevice* address byte mode OperacakeSwitchingMode Returns int SetOperacakePorts(HackRFDevice*, byte, byte, byte) Setup Opera Cake ports in @ref OPERACAKE_MODE_MANUAL mode operation Should be called after @ref hackrf_set_operacake_mode. A0 and B0 must be connected to opposite sides (A->A and B->B or A->B and B->A but not A->A and B->A or A->B and B->B) public static extern int SetOperacakePorts(HackRFDevice* device, byte address, byte port_a, byte port_b) Parameters device HackRFDevice* address byte port_a byte port_b byte Returns int SetOperacakeRanges(HackRFDevice*, byte*, byte) Setup Opera Cake frequency ranges in @ref OPERACAKE_MODE_FREQUENCY mode operation Old function to set ranges with. Use @ref hackrf_set_operacake_freq_ranges instead! Note: this configuration applies to all Opera Cake boards in @ref OPERACAKE_MODE_FREQUENCY mode [Obsolete(\"Use hackrf_set_operacake_freq_ranges instead.\")] public static extern int SetOperacakeRanges(HackRFDevice* device, byte* ranges, byte num_ranges) Parameters device HackRFDevice* ranges byte* num_ranges byte Returns int"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Lib.HackRfNativeLib.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Lib.HackRfNativeLib.html",
    "title": "Class HackRfNativeLib | HackrfDotnet",
    "summary": "Class HackRfNativeLib Namespace HackRFDotnet.NativeApi.Lib Assembly HackRFDotnet.dll public static class HackRfNativeLib Inheritance object HackRfNativeLib Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Exit() Exit libhackrf. Should be called before application exit. public static extern int Exit() Returns int Init() Initialize libhackrf. Should be called before any other function. public static extern int Init() Returns int LibraryRelease() Get library release string. public static extern sbyte* LibraryRelease() Returns sbyte* LibraryVersion() Get library version string. public static extern sbyte* LibraryVersion() Returns sbyte*"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Lib.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Lib.html",
    "title": "Namespace HackRFDotnet.NativeApi.Lib | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.NativeApi.Lib Classes HackRfNativeLib HackRfNativeLib.Debug HackRfNativeLib.DeviceStreaming HackRfNativeLib.Devices HackRfNativeLib.Firmware HackRfNativeLib.Operacake"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html",
    "title": "Struct HackRFDevice | HackrfDotnet",
    "summary": "Struct HackRFDevice Namespace HackRFDotnet.NativeApi.Structs.Devices Assembly HackRFDotnet.dll public struct HackRFDevice Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.Devices.HackRFDeviceList.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.Devices.HackRFDeviceList.html",
    "title": "Struct HackRFDeviceList | HackrfDotnet",
    "summary": "Struct HackRFDeviceList Namespace HackRFDotnet.NativeApi.Structs.Devices Assembly HackRFDotnet.dll public struct HackRFDeviceList Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields devicecount Number of connected HackRF devices public int devicecount Field Value int serial_numbers Array of human-readable serial numbers. Each entry can be NULL. public char** serial_numbers Field Value char** usb_board_ids ID of each board, based on USB product ID public HackrfUsbBoardId* usb_board_ids Field Value HackrfUsbBoardId* usb_device_index USB device index for each HW entry public int* usb_device_index Field Value int* usb_devicecount Number of all queried USB devices public int usb_devicecount Field Value int usb_devices All USB devices (as libusb_device** array) public void** usb_devices Field Value void**"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.Devices.HackRFOperacakeDwellTime.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.Devices.HackRFOperacakeDwellTime.html",
    "title": "Struct HackRFOperacakeDwellTime | HackrfDotnet",
    "summary": "Struct HackRFOperacakeDwellTime Namespace HackRFDotnet.NativeApi.Structs.Devices Assembly HackRFDotnet.dll public struct HackRFOperacakeDwellTime Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields dwell Dwell time for port (in number of samples) public uint dwell Field Value uint port Port to connect A0 to (B0 mirrors this choice) Must be one of operacake_ports public byte port Field Value byte"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.Devices.HackRFOperacakeFreqRange.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.Devices.HackRFOperacakeFreqRange.html",
    "title": "Struct HackRFOperacakeFreqRange | HackrfDotnet",
    "summary": "Struct HackRFOperacakeFreqRange Namespace HackRFDotnet.NativeApi.Structs.Devices Assembly HackRFDotnet.dll public struct HackRFOperacakeFreqRange Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields freq_max Stop frequency (in MHz) public ushort freq_max Field Value ushort freq_min Start frequency (in MHz) public ushort freq_min Field Value ushort port Port (A0) to use for that frequency range. Port B0 mirrors this. Must be one of operacake_ports public byte port Field Value byte"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.Devices.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.Devices.html",
    "title": "Namespace HackRFDotnet.NativeApi.Structs.Devices | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.NativeApi.Structs.Devices Structs HackRFDevice HackRFDeviceList HackRFOperacakeDwellTime HackRFOperacakeFreqRange"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.HackRFBiasTUserSettingReq.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.HackRFBiasTUserSettingReq.html",
    "title": "Struct HackRFBiasTUserSettingReq | HackrfDotnet",
    "summary": "Struct HackRFBiasTUserSettingReq Namespace HackRFDotnet.NativeApi.Structs Assembly HackRFDotnet.dll public struct HackRFBiasTUserSettingReq Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields off public HackRFBoolUserSetting off Field Value HackRFBoolUserSetting rx public HackRFBoolUserSetting rx Field Value HackRFBoolUserSetting tx public HackRFBoolUserSetting tx Field Value HackRFBoolUserSetting"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.HackRFBoolUserSetting.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.HackRFBoolUserSetting.html",
    "title": "Struct HackRFBoolUserSetting | HackrfDotnet",
    "summary": "Struct HackRFBoolUserSetting Namespace HackRFDotnet.NativeApi.Structs Assembly HackRFDotnet.dll public struct HackRFBoolUserSetting Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields change_on_mode_entry Change value on mode entry public bool change_on_mode_entry Field Value bool do_update If true, update default values public bool do_update Field Value bool enabled Enabled public bool enabled Field Value bool"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.HackRFFlushCallback.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.HackRFFlushCallback.html",
    "title": "Delegate HackRFFlushCallback | HackrfDotnet",
    "summary": "Delegate HackRFFlushCallback Namespace HackRFDotnet.NativeApi.Structs Assembly HackRFDotnet.dll public delegate void HackRFFlushCallback(nint flush_ctx, int status) Parameters flush_ctx nint status int"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback.html",
    "title": "Delegate HackRFSampleBlockCallback | HackrfDotnet",
    "summary": "Delegate HackRFSampleBlockCallback Namespace HackRFDotnet.NativeApi.Structs Assembly HackRFDotnet.dll public delegate int HackRFSampleBlockCallback(HackrfTransfer* transfer) Parameters transfer HackrfTransfer* Returns int"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.HackRFTxBlockCompleteCallback.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.HackRFTxBlockCompleteCallback.html",
    "title": "Delegate HackRFTxBlockCompleteCallback | HackrfDotnet",
    "summary": "Delegate HackRFTxBlockCompleteCallback Namespace HackRFDotnet.NativeApi.Structs Assembly HackRFDotnet.dll public delegate void HackRFTxBlockCompleteCallback(HackrfTransfer* transfer, int status) Parameters transfer HackrfTransfer* status int"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.HackrfTransfer.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.HackrfTransfer.html",
    "title": "Struct HackrfTransfer | HackrfDotnet",
    "summary": "Struct HackrfTransfer Namespace HackRFDotnet.NativeApi.Structs Assembly HackRFDotnet.dll public struct HackrfTransfer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields buffer public byte* buffer Field Value byte* buffer_length public int buffer_length Field Value int device public HackRFDevice* device Field Value HackRFDevice* rx_ctx public void* rx_ctx Field Value void* tx_ctx public void* tx_ctx Field Value void* valid_length public int valid_length Field Value int"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.System.HackRFM0State.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.System.HackRFM0State.html",
    "title": "Struct HackRFM0State | HackrfDotnet",
    "summary": "Struct HackRFM0State Namespace HackRFDotnet.NativeApi.Structs.System Assembly HackRFDotnet.dll public struct HackRFM0State Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields active_mode Active mode. Same values as requested_mode public uint active_mode Field Value uint error Error that caused M0 to revert to IDLE. 0(NONE), 1(RX_TIMEOUT), 2(TX_TIMEOUT), 3(MISSED_DEADLINE) public uint error Field Value uint longest_shortfall Longest shortfall in bytes public uint longest_shortfall Field Value uint m0_count Number of bytes transferred by the M0 public uint m0_count Field Value uint m4_count Number of bytes transferred by the M4 public uint m4_count Field Value uint next_mode Mode which will be switched to when threshold is reached public uint next_mode Field Value uint num_shortfalls Number of shortfalls public uint num_shortfalls Field Value uint request_flag Request flag. 0 = completed, others = pending public ushort request_flag Field Value ushort requested_mode Requested mode. Possible values: 0(IDLE), 1(WAIT), 2(RX), 3(TX_START), 4(TX_RUN) public ushort requested_mode Field Value ushort shortfall_limit Shortfall limit in bytes public uint shortfall_limit Field Value uint threshold Threshold m0_count value (in bytes) for next mode change public uint threshold Field Value uint"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.System.ReadPartidSerialNo.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.System.ReadPartidSerialNo.html",
    "title": "Struct ReadPartidSerialNo | HackrfDotnet",
    "summary": "Struct ReadPartidSerialNo Namespace HackRFDotnet.NativeApi.Structs.System Assembly HackRFDotnet.dll public struct ReadPartidSerialNo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields part_id public uint* part_id Field Value uint* serial_no public uint* serial_no Field Value uint*"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.System.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.System.html",
    "title": "Namespace HackRFDotnet.NativeApi.Structs.System | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.NativeApi.Structs.System Structs HackRFM0State ReadPartidSerialNo"
  },
  "_githubPages/api/HackRFDotnet.NativeApi.Structs.html": {
    "href": "_githubPages/api/HackRFDotnet.NativeApi.Structs.html",
    "title": "Namespace HackRFDotnet.NativeApi.Structs | HackrfDotnet",
    "summary": "Namespace HackRFDotnet.NativeApi.Structs Structs HackRFBiasTUserSettingReq HackRFBoolUserSetting HackrfTransfer Delegates HackRFFlushCallback HackRFSampleBlockCallback HackRFTxBlockCompleteCallback"
  },
  "hackrf/CODE_OF_CONDUCT.html": {
    "href": "hackrf/CODE_OF_CONDUCT.html",
    "title": "Contributor Covenant Code of Conduct | HackrfDotnet",
    "summary": "Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at straithe@greatscottgadgets.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact: A violation through a single incident or series of actions. Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior. Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence: A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder. For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations."
  },
  "hackrf/Readme.html": {
    "href": "hackrf/Readme.html",
    "title": "HackRF | HackrfDotnet",
    "summary": "HackRF This repository contains hardware designs and software for HackRF, a low cost, open source Software Defined Radio platform. (photo by fd0 from https://github.com/fd0/hackrf-one-pictures) principal author: Michael Ossmann mike@ossmann.com Information on HackRF and purchasing HackRF: https://greatscottgadgets.com/hackrf/ Documentation Documentation for HackRF can be viewed on Read the Docs. The raw documentation files for HackRF are in the docs folder in this repository and can be built locally by installing Sphinx Docs and running make html. Documentation changes can be submitted through pull request and suggestions can be made as GitHub issues. To create a PDF of the HackRF documentation from the HackRF repository while on Ubuntu: run sudo apt install latexmk texlive-latex-extra navigate to hackrf/docs on command line run the command make latex run the command make latexpdf Getting Help Before asking for help with HackRF, check to see if your question is listed in the FAQ. For assistance with HackRF general use or development, please look at the issues on the GitHub project. This is the preferred place to ask questions so that others may locate the answer to your question in the future. We invite you to join our community discussions on Discord. Note that while technical support requests are welcome here, we do not have support staff on duty at all times. Be sure to also submit an issue on GitHub if you've found a bug or if you want to ensure that your request will be tracked and not overlooked. If you wish to see past discussions and questions about HackRF, you may also view the mailing list archives. GitHub issues on this repository that are labelled \"technical support\" by Great Scott Gadgets employees can expect a response time of two weeks. We currently do not have expected response times for other GitHub issues or pull requests for this repository."
  },
  "hackrf/firmware/cpld/sgpio_debug/README.html": {
    "href": "hackrf/firmware/cpld/sgpio_debug/README.html",
    "title": "CPLD-based triggered capture | HackrfDotnet",
    "summary": "CPLD interface between LPC43xx microcontroller SGPIO peripheral and MAX5864 RF codec. CPLD-based triggered capture To build this VHDL project and produce an SVF file for flashing the CPLD: Xilinx WebPACK 13.4 for Windows or Linux. Generate an XSVF After generating a programming file: In the ISE Project Navigator, \"Processes: top - Behavioral\" pane, double-click \"Configure Target Device\". Click \"OK\" to open iMPACT. Ctrl-N to create a \"New Project\". \"Yes\" to automatically create and save a project file. Select \"Prepare a Boundary-Scan File\", choose \"XSVF\". Select file name \"default.xsvf\". Click \"OK\" to start adding devices. Assign new configuration file: \"top.jed\". Right-click the \"xc2c64a top.jed\" icon and select \"Erase\". Accept defaults. Right-click the \"xc2c64a top.jed\" icon and select \"Program\". Right-click the \"xc2c64a top.jed\" icon and select \"Verify\". Choose menu \"Output\" -> \"XSVF File\" -> \"Stop Writing to XSVF File\". Close iMPACT. To Program $ hackrf_cpldjtag -x default.xsvf"
  },
  "hackrf/firmware/cpld/sgpio_if/README.html": {
    "href": "hackrf/firmware/cpld/sgpio_if/README.html",
    "title": "CPLD-based triggered capture | HackrfDotnet",
    "summary": "CPLD interface between LPC43xx microcontroller SGPIO peripheral and MAX5864 RF codec. CPLD-based triggered capture To build this VHDL project and produce an SVF file for flashing the CPLD: Xilinx WebPACK 13.4 for Windows or Linux. Generate an XSVF After generating a programming file: In the ISE Project Navigator, \"Processes: top - Behavioral\" pane, double-click \"Configure Target Device\". Click \"OK\" to open iMPACT. Ctrl-N to create a \"New Project\". \"Yes\" to automatically create and save a project file. Select \"Prepare a Boundary-Scan File\", choose \"XSVF\". Select file name \"default.xsvf\". Click \"OK\" to start adding devices. Assign new configuration file: \"top.jed\". Right-click the \"xc2c64a top.jed\" icon and select \"Erase\". Accept defaults. Right-click the \"xc2c64a top.jed\" icon and select \"Program\". Right-click the \"xc2c64a top.jed\" icon and select \"Verify\". Choose menu \"Output\" -> \"XSVF File\" -> \"Stop Writing to XSVF File\". Close iMPACT. To Program $ hackrf_cpldjtag -x default.xsvf"
  },
  "hackrf/hardware/gsg-kicad-lib/CODE_OF_CONDUCT.html": {
    "href": "hackrf/hardware/gsg-kicad-lib/CODE_OF_CONDUCT.html",
    "title": "Contributor Covenant Code of Conduct | HackrfDotnet",
    "summary": "Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at straithe@greatscottgadgets.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact: A violation through a single incident or series of actions. Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior. Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence: A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder. For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations."
  },
  "hackrf/hardware/gsg-kicad-lib/README.html": {
    "href": "hackrf/hardware/gsg-kicad-lib/README.html",
    "title": "gsg-kicad-lib | HackrfDotnet",
    "summary": "gsg-kicad-lib GSG's schematic symbols and modules for KiCad"
  },
  "hackrf/hardware/hackrf-one/acrylic_case/README.html": {
    "href": "hackrf/hardware/hackrf-one/acrylic_case/README.html",
    "title": "| HackrfDotnet",
    "summary": "Acrylic Case This design is licensed under the GPL-2.0 license. Documentation is licensed under the GPL-2.0 license. The vector graphic file provided in this repo was created with Inkscape. The BOM 4 x 4.5 mm OD Hex Standoffs (Female-Female) / M3-0.5 x 6 mm / Aluminum 4 x 4.5 mm OD Hex Standoffs (Female-Female) / M3-0.5 x 5 mm / Aluminum 4 x M3-0.5 x 12 mm / Phillips Pan Head Machine Screw 4 x M3-0.5 x 5 mm / Phillips Pan Head Machine Screw Optional: 4 (per neighbor) x 4.5 mm OD Hex Standoffs (Male-Female) / M3-0.5 x 11 mm / Aluminum These standoffs are t### The BOM 4 x 4.5 mm OD Hex Standoffs (Female-Female) / M3-0.5 x 6 mm / Aluminum 4 x 4.5 mm OD Hex Standoffs (Female-Female) / M3-0.5 x 5 mm / Aluminum 4 x M3-0.5 x 12 mm / Phillips Pan Head Machine Screw 4 x M3-0.5 x 5 mm / Phillips Pan Head Machine Screw Optional: 4 (per neighbor) x 4.5 mm OD Hex Standoffs (Male-Female) / M3-0.5 x 11 mm / Aluminum These standoffs are to be used if a neighbor is stacked on your HackRF One and you want your case to be stacked above that neighbor. Assembly Instructions Assembly instructions can be found here."
  },
  "hackrf/host/README.html": {
    "href": "hackrf/host/README.html",
    "title": "| HackrfDotnet",
    "summary": "This repository contains host software (Linux/Windows) for HackRF, a project to produce a low cost, open source software radio platform. How to build the host software on Linux: Prerequisites for Linux (Debian/Ubuntu): sudo apt-get install build-essential cmake libusb-1.0-0-dev pkg-config libfftw3-dev Build host software on Linux: mkdir host/build cd host/build cmake .. make sudo make install sudo ldconfig By default this will attempt to install an udev rule to /etc/udev/rules.d to provide the usb or plugdev group access to HackRF. If your setup requires the udev rule to be installed elsewhere you can modify the path with -DUDEV_RULES_PATH=/path/to/udev. Note: The udev rule is not installed by default for PyBOMBS installs as they do not ususally get installed with root privileges. Clean CMake temporary files/dirs: cd host/build rm -rf * How to build host software on Windows: Prerequisites for Cygwin, MinGW, or Visual Studio: cmake-2.8.12.1 or later from http://www.cmake.org/cmake/resources/software.html libusbx-1.0.18 or later from http://sourceforge.net/projects/libusbx/files/latest/download?source=files fftw-3.3.5 or later from http://www.fftw.org/install/windows.html Install Windows driver for HackRF hardware or use Zadig see http://sourceforge.net/projects/libwdi/files/zadig If you want to use Zadig select HackRF USB device and just install/replace it with WinUSB driver. Note for Windows build: You shall always execute hackrf-tools from Windows command shell and not from Cygwin or MinGW shell because on Cygwin/MinGW Ctrl C is not managed correctly and especially for hackrf_transfer the Ctrl C(abort) will not stop correctly and will corrupt the file. For Cygwin: mkdir host/build cd host/build cmake ../ -G \"Unix Makefiles\" -DCMAKE_LEGACY_CYGWIN_WIN32=1 -DLIBUSB_INCLUDE_DIR=/usr/local/include/libusb-1.0/ make make install For MinGW: mkdir host/build cd host/build cmake ../ -G \"MSYS Makefiles\" -DLIBUSB_INCLUDE_DIR=/usr/local/include/libusb-1.0/ make make install For Visual Studio 2015 x64 Create library definition for MSVC to link to C:\\fftw-3.3.5-dll64> lib /machine:x64 /def:libfftw3f-3.def c:\\hackrf\\host\\build> cmake ../ -G \"Visual Studio 14 2015 Win64\" \\ -DLIBUSB_INCLUDE_DIR=c:\\libusb-1.0.21\\libusb \\ -DLIBUSB_LIBRARIES=c:\\libusb-1.0.21\\MS64\\dll\\lib\\libusb-1.0.lib \\ -DTHREADS_PTHREADS_INCLUDE_DIR=c:\\pthreads-w32-2-9-1-release\\Pre-built.2\\include \\ -DTHREADS_PTHREADS_WIN32_LIBRARY=c:\\pthreads-w32-2-9-1-release\\Pre-built.2\\lib\\x64\\pthreadVC2.lib \\ -DFFTW_INCLUDES=C:\\fftw-3.3.5-dll64 \\ -DFFTW_LIBRARIES=C:\\fftw-3.3.5-dll64\\libfftw3f-3.lib CMake will produce a solution file named HackRF.sln and a series of project files which can be built with msbuild as follows: c:\\hackrf\\host\\build> msbuild HackRF.sln How to build host the software on FreeBSD You can use the binary package: # pkg install hackrf You can build and install from ports: # cd /usr/ports/comms/hackrf # make install How to build the host software on macOS: Install dependencies Homebrew: brew install cmake libusb pkg-config Install FFTW from this guide Build it mkdir host/build cd host/build cmake .. make sudo make install sudo update_dyld_shared_cache # equivalent to ldconfig in linux Credits principal author: Michael Ossmann mike@ossmann.com http://greatscottgadgets.com/hackrf/"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | HackrfDotnet",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}