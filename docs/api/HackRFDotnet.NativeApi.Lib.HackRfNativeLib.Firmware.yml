### YamlMime:ApiPage
title: Class HackRfNativeLib.Firmware
body:
- api1: Class HackRfNativeLib.Firmware
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware
  src: https://github.com/Realynx/HackRFDotnet/blob/master/HackRFDotnet/NativeApi/Lib/Firmware.cs#L9
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware
    commentId: T:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware
- facts:
  - name: Namespace
    value:
      text: HackRFDotnet.NativeApi.Lib
      url: HackRFDotnet.NativeApi.Lib.html
  - name: Assembly
    value: HackRFDotnet.dll
- code: public static class HackRfNativeLib.Firmware
- h4: Inheritance
- inheritance:
  - text: object
    url: https://learn.microsoft.com/dotnet/api/system.object
  - text: HackRfNativeLib.Firmware
    url: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.html
- h4: Inherited Members
- list:
  - text: object.Equals(object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - text: object.Equals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - text: object.GetHashCode()
    url: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - text: object.GetType()
    url: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - text: object.MemberwiseClone()
    url: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - text: object.ReferenceEquals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - text: object.ToString()
    url: https://learn.microsoft.com/dotnet/api/system.object.tostring
- h2: Methods
- api3: BoardIdName(HackrfBoardId)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_BoardIdName_HackRFDotnet_NativeApi_Enums_System_HackrfBoardId_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.BoardIdName(HackRFDotnet.NativeApi.Enums.System.HackrfBoardId)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.BoardIdName(HackRFDotnet.NativeApi.Enums.System.HackrfBoardId)
- markdown: Convert <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfBoardId" data-throw-if-not-resolved="false"></xref> into human-readable string.
- code: public static extern sbyte* BoardIdName(HackrfBoardId board_id)
- h4: Parameters
- parameters:
  - name: board_id
    type:
    - text: HackrfBoardId
      url: HackRFDotnet.NativeApi.Enums.System.HackrfBoardId.html
    description: Enum to convert.
- h4: Returns
- parameters:
  - type:
    - text: sbyte
      url: https://learn.microsoft.com/dotnet/api/system.sbyte
    - '*'
    description: Human-readable name of board id.
- api3: BoardRevName(HackrfBoardRev)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_BoardRevName_HackRFDotnet_NativeApi_Enums_System_HackrfBoardRev_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.BoardRevName(HackRFDotnet.NativeApi.Enums.System.HackrfBoardRev)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.BoardRevName(HackRFDotnet.NativeApi.Enums.System.HackrfBoardRev)
- markdown: Convert board revision name.
- code: public static extern sbyte* BoardRevName(HackrfBoardRev board_rev)
- h4: Parameters
- parameters:
  - name: board_rev
    type:
    - text: HackrfBoardRev
      url: HackRFDotnet.NativeApi.Enums.System.HackrfBoardRev.html
    description: Board revision enum from <xref href="HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadBoardRev(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*%2cHackRFDotnet.NativeApi.Enums.System.HackrfBoardRev*)" data-throw-if-not-resolved="false"></xref>.
- h4: Returns
- parameters:
  - type:
    - text: sbyte
      url: https://learn.microsoft.com/dotnet/api/system.sbyte
    - '*'
    description: Human-readable name of board revision. Discards GSG bit.
- api3: ClearSpiflashStatus(HackRFDevice*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_ClearSpiflashStatus_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ClearSpiflashStatus(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ClearSpiflashStatus(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
- markdown: >-
    Clear the status registers of the W25Q80BV SPI flash chip.


    See the datasheet for details of the status registers.


    Requires USB API version 0x0103 or above!
- code: public static extern HackrfError ClearSpiflashStatus(HackRFDevice* device)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to clear.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: EraseSpiflash(HackRFDevice*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_EraseSpiflash_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.EraseSpiflash(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.EraseSpiflash(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
- markdown: >-
    Erase firmware image on the SPI flash.


    Should be followed by writing a new image, or the HackRF will be soft-bricked (still rescuable in DFU mode).
- code: public static extern HackrfError EraseSpiflash(HackRFDevice* device)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to erase.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: GetClkinStatus(HackRFDevice*, byte*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_GetClkinStatus_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.GetClkinStatus(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.GetClkinStatus(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*)
- markdown: >-
    Get CLKIN status.


    Check if an external clock signal is detected on the CLKIN port.


    Requires USB API version 0x0106 or above!
- code: public static extern HackrfError GetClkinStatus(HackRFDevice* device, byte* status)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to read status from.
  - name: status
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    - '*'
    description: External clock detected (0/1).
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: GetMcuState(HackRFDevice*, HackRFM0State*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_GetMcuState_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__HackRFDotnet_NativeApi_Structs_System_HackRFM0State__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.GetMcuState(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.System.HackRFM0State*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.GetMcuState(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.System.HackRFM0State*)
- markdown: >-
    Get the state of the M0 code on the LPC43xx MCU.


    Requires USB API version 0x0106 or above!
- code: public static extern HackrfError GetMcuState(HackRFDevice* device, HackRFM0State* value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
  - name: value
    type:
    - text: HackRFM0State
      url: HackRFDotnet.NativeApi.Structs.System.HackRFM0State.html
    - '*'
    description: MCU code state.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: LookupBoardIdPlatform(HackrfBoardId)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_LookupBoardIdPlatform_HackRFDotnet_NativeApi_Enums_System_HackrfBoardId_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.LookupBoardIdPlatform(HackRFDotnet.NativeApi.Enums.System.HackrfBoardId)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.LookupBoardIdPlatform(HackRFDotnet.NativeApi.Enums.System.HackrfBoardId)
- markdown: Lookup platform ID (HACKRF_PLATFORM_xxx) from board id (<xref href="HackRFDotnet.NativeApi.Enums.System.HackrfBoardId" data-throw-if-not-resolved="false"></xref>).
- code: public static extern uint LookupBoardIdPlatform(HackrfBoardId board_id)
- h4: Parameters
- parameters:
  - name: board_id
    type:
    - text: HackrfBoardId
      url: HackRFDotnet.NativeApi.Enums.System.HackrfBoardId.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfBoardId" data-throw-if-not-resolved="false"></xref> enum variant to convert.
- h4: Returns
- parameters:
  - type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: >-
      <xref href="HackRFDotnet.NativeApi.NativeConstants.HACKRF_PLATFORM_JAWBREAKER" data-throw-if-not-resolved="false"></xref>, <xref href="HackRFDotnet.NativeApi.NativeConstants.HACKRF_PLATFORM_HACKRF1_OG" data-throw-if-not-resolved="false"></xref>, <xref href="HackRFDotnet.NativeApi.NativeConstants.HACKRF_PLATFORM_RAD1O" data-throw-if-not-resolved="false"></xref>,

      <xref href="HackRFDotnet.NativeApi.NativeConstants.HACKRF_PLATFORM_HACKRF1_R9" data-throw-if-not-resolved="false"></xref> or 0
- api3: ReadBoardId(HackRFDevice*, byte*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_ReadBoardId_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadBoardId(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadBoardId(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*)
- markdown: >-
    Read <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfBoardId" data-throw-if-not-resolved="false"></xref> from a device.


    The result can be converted into a human-readable string via <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfBoardId" data-throw-if-not-resolved="false"></xref>.
- code: public static extern HackrfError ReadBoardId(HackRFDevice* device, byte* value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
  - name: value
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    - '*'
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfBoardId" data-throw-if-not-resolved="false"></xref> enum value.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: ReadBoardPartIdSerialNo(HackRFDevice*, ReadPartidSerialNo*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_ReadBoardPartIdSerialNo_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__HackRFDotnet_NativeApi_Structs_System_ReadPartidSerialNo__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadBoardPartIdSerialNo(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.System.ReadPartidSerialNo*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadBoardPartIdSerialNo(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.System.ReadPartidSerialNo*)
- markdown: >-
    Read board part ID and serial number.


    Read MCU part id and serial number. See the documentation of the MCU for details!
- code: public static extern HackrfError ReadBoardPartIdSerialNo(HackRFDevice* device, ReadPartidSerialNo* read_partid_serialno)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
  - name: read_partid_serialno
    type:
    - text: ReadPartidSerialNo
      url: HackRFDotnet.NativeApi.Structs.System.ReadPartidSerialNo.html
    - '*'
    description: Result of query.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: ReadBoardRev(HackRFDevice*, HackrfBoardRev*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_ReadBoardRev_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__HackRFDotnet_NativeApi_Enums_System_HackrfBoardRev__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadBoardRev(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Enums.System.HackrfBoardRev*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadBoardRev(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Enums.System.HackrfBoardRev*)
- markdown: Read board revision of device.
- code: public static extern HackrfError ReadBoardRev(HackRFDevice* device, HackrfBoardRev* value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to read board revision from.
  - name: value
    type:
    - text: HackrfBoardRev
      url: HackRFDotnet.NativeApi.Enums.System.HackrfBoardRev.html
    - '*'
    description: Revision enum, will become one of <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfBoardRev" data-throw-if-not-resolved="false"></xref>. Should be initialized with <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfBoardRev.BOARD_REV_UNDETECTED" data-throw-if-not-resolved="false"></xref>.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_ERROR_LIBUSB" data-throw-if-not-resolved="false"></xref>.
- api3: ReadMax2837(HackRFDevice*, byte, ushort*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_ReadMax2837_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_System_UInt16__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadMax2837(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,System.UInt16*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadMax2837(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,System.UInt16*)
- markdown: >-
    Directly read the registers of the MAX2837 transceiver IC.


    Intended for debugging purposes only!
- code: public static extern HackrfError ReadMax2837(HackRFDevice* device, byte register_number, ushort* value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
  - name: register_number
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: Register number to read.
  - name: value
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    - '*'
    description: Value of the specified register.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: ReadRffc5071(HackRFDevice*, byte, ushort*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_ReadRffc5071_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_System_UInt16__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadRffc5071(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,System.UInt16*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadRffc5071(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,System.UInt16*)
- markdown: >-
    Directly read the registers of the RFFC5071/5072 mixer-synthesizer IC.


    Intended for debugging purposes only!
- code: public static extern HackrfError ReadRffc5071(HackRFDevice* device, byte register_number, ushort* value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
  - name: register_number
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: Register number to read.
  - name: value
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    - '*'
    description: Value of the specified register.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: ReadSi5351c(HackRFDevice*, ushort, ushort*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_ReadSi5351c_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt16_System_UInt16__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadSi5351c(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt16,System.UInt16*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadSi5351c(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt16,System.UInt16*)
- markdown: >-
    Directly read the registers of the Si5351C clock generator IC.


    Intended for debugging purposes only!
- code: public static extern HackrfError ReadSi5351c(HackRFDevice* device, ushort register_number, ushort* value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
  - name: register_number
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    description: Register number to read.
  - name: value
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    - '*'
    description: Value of the specified register.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: ReadSpiflash(HackRFDevice*, uint, ushort, byte*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_ReadSpiflash_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt32_System_UInt16_System_Byte__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadSpiflash(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32,System.UInt16,System.Byte*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadSpiflash(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32,System.UInt16,System.Byte*)
- markdown: >-
    Read firmware image on the SPI flash.


    Should only be used for firmware verification.
- code: public static extern HackrfError ReadSpiflash(HackRFDevice* device, uint address, ushort length, byte* data)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to read from.
  - name: address
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: Address to read from. Firmware should start at 0
  - name: length
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    description: Length of data to read. Must be at most 256.
  - name: data
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    - '*'
    description: Pointer to buffer.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: ReadSupportedPlatform(HackRFDevice*, uint*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_ReadSupportedPlatform_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt32__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadSupportedPlatform(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadSupportedPlatform(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32*)
- markdown: >-
    Read supported platform of device.


    Returns a combination of <xref href="HackRFDotnet.NativeApi.NativeConstants.HACKRF_PLATFORM_JAWBREAKER" data-throw-if-not-resolved="false"></xref> | <xref href="HackRFDotnet.NativeApi.NativeConstants.HACKRF_PLATFORM_HACKRF1_OG" data-throw-if-not-resolved="false"></xref> |

    <xref href="HackRFDotnet.NativeApi.NativeConstants.HACKRF_PLATFORM_RAD1O" data-throw-if-not-resolved="false"></xref> | <xref href="HackRFDotnet.NativeApi.NativeConstants.HACKRF_PLATFORM_HACKRF1_R9" data-throw-if-not-resolved="false"></xref>.


    Requires USB API version 0x0106 or above!
- code: public static extern HackrfError ReadSupportedPlatform(HackRFDevice* device, uint* value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
  - name: value
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    - '*'
    description: Supported platform bitfield.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: ReadUsbApiVersion(HackRFDevice*, ushort*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_ReadUsbApiVersion_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt16__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadUsbApiVersion(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt16*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadUsbApiVersion(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt16*)
- markdown: >-
    Read HackRF USB API version.


    Read version as MM.mm 16-bit value, where MM is the major and mm is the minor version, encoded as the hex digits of the 16-bit number.
- code: public static extern HackrfError ReadUsbApiVersion(HackRFDevice* device, ushort* version)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
  - name: version
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    - '*'
    description: USB API version.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: ReadVersion(HackRFDevice*, byte*, byte)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_ReadVersion_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte__System_Byte_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadVersion(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*,System.Byte)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.ReadVersion(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*,System.Byte)
- markdown: Read HackRF firmware version as a string.
- code: public static extern HackrfError ReadVersion(HackRFDevice* device, byte* version, byte length)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
  - name: version
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    - '*'
    description: Version string.
  - name: length
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: Length of allocated string **without null byte** (so set it to `length(arr)-1`).
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetClkoutEnable(HackRFDevice*, byte)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_SetClkoutEnable_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.SetClkoutEnable(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.SetClkoutEnable(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte)
- markdown: >-
    Enable / disable CLKOUT.


    Requires USB API version 0x0103 or above!
- code: public static extern HackrfError SetClkoutEnable(HackRFDevice* device, byte value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: value
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: Clock output enabled (0/1).
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetHardwareSyncMode(HackRFDevice*, byte)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_SetHardwareSyncMode_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.SetHardwareSyncMode(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.SetHardwareSyncMode(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte)
- markdown: >-
    Set hardware sync mode (hardware triggering).


    See the documentation on hardware triggering for details.


    Requires USB API version 0x0102 or above!
- code: public static extern HackrfError SetHardwareSyncMode(HackRFDevice* device, byte value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: value
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: Enable (1) or disable (0) hardware triggering.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SpiflashStatus(HackRFDevice*, byte*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_SpiflashStatus_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.SpiflashStatus(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.SpiflashStatus(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*)
- markdown: >-
    Read the status registers of the W25Q80BV SPI flash chip.


    See the datasheet for details of the status registers. The two registers are read in order.


    Requires USB API version 0x0103 or above!
- code: public static extern HackrfError SpiflashStatus(HackRFDevice* device, byte* data)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
  - name: data
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    - '*'
    description: char[2] array of the status registers.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: UsbBoardIdName(HackrfUsbBoardId)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_UsbBoardIdName_HackRFDotnet_NativeApi_Enums_System_HackrfUsbBoardId_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.UsbBoardIdName(HackRFDotnet.NativeApi.Enums.System.HackrfUsbBoardId)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.UsbBoardIdName(HackRFDotnet.NativeApi.Enums.System.HackrfUsbBoardId)
- markdown: Convert <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfBoardId" data-throw-if-not-resolved="false"></xref> into human-readable string.
- code: public static extern sbyte* UsbBoardIdName(HackrfUsbBoardId usb_board_id)
- h4: Parameters
- parameters:
  - name: usb_board_id
    type:
    - text: HackrfUsbBoardId
      url: HackRFDotnet.NativeApi.Enums.System.HackrfUsbBoardId.html
    description: Enum to convert.
- h4: Returns
- parameters:
  - type:
    - text: sbyte
      url: https://learn.microsoft.com/dotnet/api/system.sbyte
    - '*'
    description: Human-readable name of board id.
- api3: WriteCpld(HackRFDevice*, byte*, uint)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_WriteCpld_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte__System_UInt32_
  deprecated: This function writes the bitstream, but the firmware auto-overrides at each reset, so no changes will take effect.
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.WriteCpld(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*,System.UInt32)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.WriteCpld(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*,System.UInt32)
- markdown: >-
    Write configuration bitstream into the XC2C64A-7VQ100C CPLD.


    Device will need to be reset after hackrf_cpld_write.
- code: >-
    [Obsolete("This function writes the bitstream, but the firmware auto-overrides at each reset, so no changes will take effect.")]

    public static extern HackrfError WriteCpld(HackRFDevice* device, byte* data, uint total_length)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: device to configure.
  - name: data
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    - '*'
    description: CPLD bitstream data.
  - name: total_length
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: length of the bitstream to write.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: WriteRffc5071(HackRFDevice*, byte, ushort)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_WriteRffc5071_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_System_UInt16_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.WriteRffc5071(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,System.UInt16)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.WriteRffc5071(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,System.UInt16)
- markdown: >-
    Directly write the registers of the RFFC5071/5072 mixer-synthesizer IC.


    Intended for debugging purposes only!
- code: public static extern HackrfError WriteRffc5071(HackRFDevice* device, byte register_number, ushort value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to write.
  - name: register_number
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: Register number to write.
  - name: value
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    description: Value to write in the specified register.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: WriteSi5351c(HackRFDevice*, ushort, ushort)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_WriteSi5351c_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt16_System_UInt16_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.WriteSi5351c(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt16,System.UInt16)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.WriteSi5351c(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt16,System.UInt16)
- markdown: >-
    Directly write the registers of the Si5351 clock generator IC.


    Intended for debugging purposes only!
- code: public static extern HackrfError WriteSi5351c(HackRFDevice* device, ushort register_number, ushort value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to write.
  - name: register_number
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    description: Register number to write.
  - name: value
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    description: Value to write in the specified register.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: WriteSpiflash(HackRFDevice*, uint, ushort, byte*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_WriteSpiflash_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt32_System_UInt16_System_Byte__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.WriteSpiflash(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32,System.UInt16,System.Byte*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.WriteSpiflash(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32,System.UInt16,System.Byte*)
- markdown: >-
    Write firmware image on the SPI flash.


    Should only be used for firmware updating. Can brick the device, but it's still rescuable in DFU mode.
- code: public static extern HackrfError WriteSpiflash(HackRFDevice* device, uint address, ushort length, byte* data)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to write on.
  - name: address
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: Address to write to. Should start at 0.
  - name: length
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    description: Length of data to write. Must be at most 256.
  - name: data
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    - '*'
    description: Data to write.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: hackrf_max2837_write(HackRFDevice*, byte, ushort)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Firmware_hackrf_max2837_write_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_System_UInt16_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.hackrf_max2837_write(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,System.UInt16)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Firmware.hackrf_max2837_write(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,System.UInt16)
- markdown: >-
    Directly write the registers of the MAX2837 transceiver IC.


    Intended for debugging purposes only!
- code: public static extern HackrfError hackrf_max2837_write(HackRFDevice* device, byte register_number, ushort value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
  - name: register_number
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: Register number to read.
  - name: value
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    description: Value of the specified register.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
languageId: csharp
