### YamlMime:ApiPage
title: Class HackRfNativeLib.Devices
body:
- api1: Class HackRfNativeLib.Devices
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Devices
  src: https://github.com/Realynx/HackRFDotnet/blob/master/HackRFDotnet/NativeApi/Lib/Devices.cs#L8
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices
    commentId: T:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices
- facts:
  - name: Namespace
    value:
      text: HackRFDotnet.NativeApi.Lib
      url: HackRFDotnet.NativeApi.Lib.html
  - name: Assembly
    value: HackRFDotnet.dll
- code: public static class HackRfNativeLib.Devices
- h4: Inheritance
- inheritance:
  - text: object
    url: https://learn.microsoft.com/dotnet/api/system.object
  - text: HackRfNativeLib.Devices
    url: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.html
- h4: Inherited Members
- list:
  - text: object.Equals(object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - text: object.Equals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - text: object.GetHashCode()
    url: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - text: object.GetType()
    url: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - text: object.MemberwiseClone()
    url: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - text: object.ReferenceEquals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - text: object.ToString()
    url: https://learn.microsoft.com/dotnet/api/system.object.tostring
- h2: Methods
- api3: CloseDevice(HackRFDevice*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Devices_CloseDevice_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.CloseDevice(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.CloseDevice(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
- markdown: Close a previously opened device.
- code: public static extern HackrfError CloseDevice(HackRFDevice* device)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to close.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or variant of <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref>.
- api3: DeviceListFree(HackRFDeviceList*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Devices_DeviceListFree_HackRFDotnet_NativeApi_Structs_Devices_HackRFDeviceList__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.DeviceListFree(HackRFDotnet.NativeApi.Structs.Devices.HackRFDeviceList*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.DeviceListFree(HackRFDotnet.NativeApi.Structs.Devices.HackRFDeviceList*)
- markdown: Free a previously allocated <xref href="HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice" data-throw-if-not-resolved="false"></xref> list.
- code: public static extern void DeviceListFree(HackRFDeviceList* list)
- h4: Parameters
- parameters:
  - name: list
    type:
    - text: HackRFDeviceList
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDeviceList.html
    - '*'
    description: List to free.
- api3: DeviceListOpen(HackRFDeviceList*, int, HackRFDevice**)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Devices_DeviceListOpen_HackRFDotnet_NativeApi_Structs_Devices_HackRFDeviceList__System_Int32_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice___
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.DeviceListOpen(HackRFDotnet.NativeApi.Structs.Devices.HackRFDeviceList*,System.Int32,HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice**)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.DeviceListOpen(HackRFDotnet.NativeApi.Structs.Devices.HackRFDeviceList*,System.Int32,HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice**)
- markdown: Open a <xref href="HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice" data-throw-if-not-resolved="false"></xref> from a device list.
- code: public static extern HackrfError DeviceListOpen(HackRFDeviceList* list, int idx, HackRFDevice** device)
- h4: Parameters
- parameters:
  - name: list
    type:
    - text: HackRFDeviceList
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDeviceList.html
    - '*'
    description: Device list to open device from.
  - name: idx
    type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: Index of the device to open.
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    - '*'
    description: Device handle to open.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success, <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_ERROR_INVALID_PARAM" data-throw-if-not-resolved="false"></xref> on invalid parameters or other <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: OpenDevice(HackRFDevice**)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Devices_OpenDevice_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice___
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.OpenDevice(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice**)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.OpenDevice(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice**)
- markdown: Open first available HackRF device.
- code: public static extern HackrfError OpenDevice(HackRFDevice** device)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    - '*'
    description: Device handle.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: >-
      <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success, <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_ERROR_INVALID_PARAM" data-throw-if-not-resolved="false"></xref> if <code class="paramref">device</code> is NULL,

      <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_ERROR_NOT_FOUND" data-throw-if-not-resolved="false"></xref> if no HackRF devices are found or other <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: OpenDeviceBySerial(string, HackRFDevice**)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Devices_OpenDeviceBySerial_System_String_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice___
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.OpenDeviceBySerial(System.String,HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice**)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.OpenDeviceBySerial(System.String,HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice**)
- markdown: Open HackRF device by serial number.
- code: public static extern HackrfError OpenDeviceBySerial(string desired_serial_number, HackRFDevice** device)
- h4: Parameters
- parameters:
  - name: desired_serial_number
    type:
    - text: string
      url: https://learn.microsoft.com/dotnet/api/system.string
    description: Serial number of device to open. If NULL then default to first device found.
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    - '*'
    description: Device handle.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success, <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_ERROR_INVALID_PARAM" data-throw-if-not-resolved="false"></xref> on invalid parameters or other <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: QueryDeviceList()
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Devices_QueryDeviceList
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.QueryDeviceList
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.QueryDeviceList
- markdown: List connected HackRF devices.
- code: public static extern HackRFDeviceList* QueryDeviceList()
- h4: Returns
- parameters:
  - type:
    - text: HackRFDeviceList
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDeviceList.html
    - '*'
    description: List of connected devices. The list should be freed with <xref href="HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.DeviceListFree(HackRFDotnet.NativeApi.Structs.Devices.HackRFDeviceList*)" data-throw-if-not-resolved="false"></xref>.
- api3: ResetDevice(HackRFDevice*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Devices_ResetDevice_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.ResetDevice(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.ResetDevice(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
- markdown: >-
    Reset HackRF device.


    Requires USB API version 0x0102 or above!
- code: public static extern HackrfError ResetDevice(HackRFDevice* device)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to reset.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetDeviceLeds(HackRFDevice*, byte)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Devices_SetDeviceLeds_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.SetDeviceLeds(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.SetDeviceLeds(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte)
- markdown: >-
    Turn on or off (override) the LEDs of the HackRF device.

    This function can turn on or off the LEDs of the device. There are 3 controllable LEDs on the HackRF one:

    USB, RX and TX. On the Rad1o, there are 4 LEDs. Each LED can be set individually, but the setting might get overridden by other functions.


    The LEDs can be set via specifying them as bits of a 8 bit number <code class="paramref">state</code>, bit 0 representing the first (USB on the HackRF One)

    and bit 3 or 4 representing the last LED. The upper 4 or 5 bits are unused.

    For example, binary value 0bxxxxx101 turns on the USB and TX LEDs on the HackRF One.
- code: public static extern HackrfError SetDeviceLeds(HackRFDevice* device, byte state)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
  - name: state
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: LED states as a bitfield.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetDeviceUiEnabled(HackRFDevice*, byte)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Devices_SetDeviceUiEnabled_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.SetDeviceUiEnabled(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Devices.SetDeviceUiEnabled(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte)
- markdown: >-
    Enable / disable UI display (RAD1O, PortaPack, etc.).

    Enable or disable the display on display-enabled devices (Rad1o, PortaPack).


    Requires USB API version 0x0104 or above!
- code: public static extern HackrfError SetDeviceUiEnabled(HackRFDevice* device, byte value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: device to enable/disable UI on.
  - name: value
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: Enable UI. Must be 1 or 0.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_ERROR_LIBUSB" data-throw-if-not-resolved="false"></xref> on usb error.
languageId: csharp
