### YamlMime:ApiPage
title: Class HackRfNativeLib.Operacake
body:
- api1: Class HackRfNativeLib.Operacake
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Operacake
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake
    commentId: T:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake
- facts:
  - name: Namespace
    value:
      text: HackRFDotnet.NativeApi.Lib
      url: HackRFDotnet.NativeApi.Lib.html
  - name: Assembly
    value: HackRFDotnet.dll
- code: public static class HackRfNativeLib.Operacake
- h4: Inheritance
- inheritance:
  - text: object
    url: https://learn.microsoft.com/dotnet/api/system.object
  - text: HackRfNativeLib.Operacake
    url: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.html
- h4: Inherited Members
- list:
  - text: object.Equals(object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - text: object.Equals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - text: object.GetHashCode()
    url: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - text: object.GetType()
    url: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - text: object.MemberwiseClone()
    url: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - text: object.ReferenceEquals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - text: object.ToString()
    url: https://learn.microsoft.com/dotnet/api/system.object.tostring
- h2: Methods
- api3: GetOperacakeBoards(HackRFDevice*, byte*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Operacake_GetOperacakeBoards_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.GetOperacakeBoards(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.GetOperacakeBoards(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*)
- markdown: >-
    Query connected Opera Cake boards

    Returns a @ref HACKRF_OPERACAKE_MAX_BOARDS size array of addresses, with @ref HACKRF_OPERACAKE_ADDRESS_INVALID as a placeholder
- code: public static extern int GetOperacakeBoards(HackRFDevice* device, byte* boards)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: ''
  - name: boards
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    - '*'
    description: ''
- h4: Returns
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: ''
- api3: GetOperacakeMode(HackRFDevice*, byte, OperacakeSwitchingMode*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Operacake_GetOperacakeMode_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_HackRFDotnet_NativeApi_Enums_Peripherals_OperacakeSwitchingMode__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.GetOperacakeMode(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,HackRFDotnet.NativeApi.Enums.Peripherals.OperacakeSwitchingMode*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.GetOperacakeMode(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,HackRFDotnet.NativeApi.Enums.Peripherals.OperacakeSwitchingMode*)
- markdown: Query Opera Cake mode
- code: public static extern int GetOperacakeMode(HackRFDevice* device, byte address, OperacakeSwitchingMode* mode)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: ''
  - name: address
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: ''
  - name: mode
    type:
    - text: OperacakeSwitchingMode
      url: HackRFDotnet.NativeApi.Enums.Peripherals.OperacakeSwitchingMode.html
    - '*'
    description: ''
- h4: Returns
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: ''
- api3: OperacakeGpioTest(HackRFDevice*, byte, ushort*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Operacake_OperacakeGpioTest_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_System_UInt16__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.OperacakeGpioTest(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,System.UInt16*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.OperacakeGpioTest(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,System.UInt16*)
- markdown: >-
    Perform GPIO test on an Opera Cake addon board
     Value 0xFFFF means "GPIO mode disabled", and hackrf_operacake advises to remove additional add-on boards and retry.
     Value 0 means all tests passed.
     In any other values, a 1 bit signals an error. Bits are grouped in groups of 3. Encoding:
     0 - u1ctrl - u3ctrl0 - u3ctrl1 - u2ctrl0 - u2ctrl1
- code: public static extern int OperacakeGpioTest(HackRFDevice* device, byte address, ushort* test_result)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: ''
  - name: address
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: ''
  - name: test_result
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    - '*'
    description: ''
- h4: Returns
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: ''
- api3: SetOperacakeDwellTimes(HackRFDevice*, HackRFOperacakeDwellTime*, byte)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Operacake_SetOperacakeDwellTimes_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__HackRFDotnet_NativeApi_Structs_Devices_HackRFOperacakeDwellTime__System_Byte_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.SetOperacakeDwellTimes(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.Devices.HackRFOperacakeDwellTime*,System.Byte)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.SetOperacakeDwellTimes(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.Devices.HackRFOperacakeDwellTime*,System.Byte)
- markdown: >-
    Setup Opera Cake dwell times in @ref OPERACAKE_MODE_TIME mode operation

    Should be called after @ref hackrf_set_operacake_mode

    **Note:** this configuration applies to all Opera Cake boards in @ref OPERACAKE_MODE_TIME mode
- code: public static extern int SetOperacakeDwellTimes(HackRFDevice* device, HackRFOperacakeDwellTime* dwell_times, byte count)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: ''
  - name: dwell_times
    type:
    - text: HackRFOperacakeDwellTime
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFOperacakeDwellTime.html
    - '*'
    description: ''
  - name: count
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: ''
- h4: Returns
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: ''
- api3: SetOperacakeFrequencyRanges(HackRFDevice*, HackRFOperacakeFreqRange*, byte)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Operacake_SetOperacakeFrequencyRanges_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__HackRFDotnet_NativeApi_Structs_Devices_HackRFOperacakeFreqRange__System_Byte_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.SetOperacakeFrequencyRanges(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.Devices.HackRFOperacakeFreqRange*,System.Byte)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.SetOperacakeFrequencyRanges(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.Devices.HackRFOperacakeFreqRange*,System.Byte)
- markdown: >-
    Setup Opera Cake frequency ranges in @ref OPERACAKE_MODE_FREQUENCY mode operation

    Should be called after @ref hackrf_set_operacake_mode

    **Note:** this configuration applies to all Opera Cake boards in @ref OPERACAKE_MODE_FREQUENCY mode
- code: public static extern int SetOperacakeFrequencyRanges(HackRFDevice* device, HackRFOperacakeFreqRange* freq_ranges, byte count)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: ''
  - name: freq_ranges
    type:
    - text: HackRFOperacakeFreqRange
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFOperacakeFreqRange.html
    - '*'
    description: ''
  - name: count
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: ''
- h4: Returns
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: ''
- api3: SetOperacakeMode(HackRFDevice*, byte, OperacakeSwitchingMode)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Operacake_SetOperacakeMode_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_HackRFDotnet_NativeApi_Enums_Peripherals_OperacakeSwitchingMode_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.SetOperacakeMode(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,HackRFDotnet.NativeApi.Enums.Peripherals.OperacakeSwitchingMode)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.SetOperacakeMode(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,HackRFDotnet.NativeApi.Enums.Peripherals.OperacakeSwitchingMode)
- markdown: Setup Opera Cake operation mode
- code: public static extern int SetOperacakeMode(HackRFDevice* device, byte address, OperacakeSwitchingMode mode)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: ''
  - name: address
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: ''
  - name: mode
    type:
    - text: OperacakeSwitchingMode
      url: HackRFDotnet.NativeApi.Enums.Peripherals.OperacakeSwitchingMode.html
    description: ''
- h4: Returns
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: ''
- api3: SetOperacakePorts(HackRFDevice*, byte, byte, byte)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Operacake_SetOperacakePorts_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_System_Byte_System_Byte_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.SetOperacakePorts(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,System.Byte,System.Byte)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.SetOperacakePorts(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte,System.Byte,System.Byte)
- markdown: >-
    Setup Opera Cake ports in @ref OPERACAKE_MODE_MANUAL mode operation

    Should be called after @ref hackrf_set_operacake_mode. A0 and B0 must be connected to

    opposite sides (A-&gt;A and B-&gt;B or A-&gt;B and B-&gt;A but not A-&gt;A and B-&gt;A or A-&gt;B and B-&gt;B)
- code: public static extern int SetOperacakePorts(HackRFDevice* device, byte address, byte port_a, byte port_b)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: ''
  - name: address
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: ''
  - name: port_a
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: ''
  - name: port_b
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: ''
- h4: Returns
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: ''
- api3: SetOperacakeRanges(HackRFDevice*, byte*, byte)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_Operacake_SetOperacakeRanges_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte__System_Byte_
  deprecated: Use hackrf_set_operacake_freq_ranges instead.
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.SetOperacakeRanges(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*,System.Byte)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.Operacake.SetOperacakeRanges(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte*,System.Byte)
- markdown: >-
    Setup Opera Cake frequency ranges in @ref OPERACAKE_MODE_FREQUENCY mode operation

    Old function to set ranges with. Use @ref hackrf_set_operacake_freq_ranges instead!

    **Note:** this configuration applies to all Opera Cake boards in @ref OPERACAKE_MODE_FREQUENCY mode
- code: >-
    [Obsolete("Use hackrf_set_operacake_freq_ranges instead.")]

    public static extern int SetOperacakeRanges(HackRFDevice* device, byte* ranges, byte num_ranges)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: ''
  - name: ranges
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    - '*'
    description: ''
  - name: num_ranges
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: ''
- h4: Returns
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: ''
languageId: csharp
