### YamlMime:ApiPage
title: Struct HackrfTransfer
body:
- api1: Struct HackrfTransfer
  id: HackRFDotnet_NativeApi_Structs_HackrfTransfer
  src: https://github.com/Realynx/HackRFDotnet/blob/master/HackRFDotnet/NativeApi/Structs/HackrfTransfer.cs#L12
  metadata:
    uid: HackRFDotnet.NativeApi.Structs.HackrfTransfer
    commentId: T:HackRFDotnet.NativeApi.Structs.HackrfTransfer
- facts:
  - name: Namespace
    value:
      text: HackRFDotnet.NativeApi.Structs
      url: HackRFDotnet.NativeApi.Structs.html
  - name: Assembly
    value: HackRFDotnet.dll
- markdown: >-
    USB transfer information passed to RX or TX callback.

    A callback should treat all these fields as read-only except that a TX callback should write to the data buffer and may write to <xref href="HackRFDotnet.NativeApi.Structs.HackrfTransfer.valid_length" data-throw-if-not-resolved="false"></xref>

    to indicate that a smaller number of bytes is to be transmitted.
- code: public struct HackrfTransfer
- h4: Inherited Members
- list:
  - text: object.Equals(object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - text: object.Equals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - text: object.GetHashCode()
    url: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - text: object.GetType()
    url: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - text: object.ReferenceEquals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - text: object.ToString()
    url: https://learn.microsoft.com/dotnet/api/system.object.tostring
- h2: Fields
- api3: buffer
  id: HackRFDotnet_NativeApi_Structs_HackrfTransfer_buffer
  src: https://github.com/Realynx/HackRFDotnet/blob/master/HackRFDotnet/NativeApi/Structs/HackrfTransfer.cs#L21
  metadata:
    uid: HackRFDotnet.NativeApi.Structs.HackrfTransfer.buffer
    commentId: F:HackRFDotnet.NativeApi.Structs.HackrfTransfer.buffer
- markdown: Transfer data buffer (interleaved 8 bit I/Q samples).
- code: public byte* buffer
- h4: Field Value
- parameters:
  - type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    - '*'
- api3: buffer_length
  id: HackRFDotnet_NativeApi_Structs_HackrfTransfer_buffer_length
  src: https://github.com/Realynx/HackRFDotnet/blob/master/HackRFDotnet/NativeApi/Structs/HackrfTransfer.cs#L26
  metadata:
    uid: HackRFDotnet.NativeApi.Structs.HackrfTransfer.buffer_length
    commentId: F:HackRFDotnet.NativeApi.Structs.HackrfTransfer.buffer_length
- markdown: Length of data buffer in bytes.
- code: public int buffer_length
- h4: Field Value
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
- api3: device
  id: HackRFDotnet_NativeApi_Structs_HackrfTransfer_device
  src: https://github.com/Realynx/HackRFDotnet/blob/master/HackRFDotnet/NativeApi/Structs/HackrfTransfer.cs#L16
  metadata:
    uid: HackRFDotnet.NativeApi.Structs.HackrfTransfer.device
    commentId: F:HackRFDotnet.NativeApi.Structs.HackrfTransfer.device
- markdown: HackRF USB device for this transfer.
- code: public HackRFDevice* device
- h4: Field Value
- parameters:
  - type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
- api3: rx_ctx
  id: HackRFDotnet_NativeApi_Structs_HackrfTransfer_rx_ctx
  src: https://github.com/Realynx/HackRFDotnet/blob/master/HackRFDotnet/NativeApi/Structs/HackrfTransfer.cs#L37
  metadata:
    uid: HackRFDotnet.NativeApi.Structs.HackrfTransfer.rx_ctx
    commentId: F:HackRFDotnet.NativeApi.Structs.HackrfTransfer.rx_ctx
- markdown: >-
    User provided RX context. Not used by the library, but available to transfer callbacks for use. Set along with the transfer callback using <xref href="HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StartRx(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*%2cHackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback%2cSystem.Void*)" data-throw-if-not-resolved="false"></xref>

    or <xref href="HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StartRxSweep(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*%2cHackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback%2cSystem.Void*)" data-throw-if-not-resolved="false"></xref>.
- code: public void* rx_ctx
- h4: Field Value
- parameters:
  - type:
    - text: void
      url: https://learn.microsoft.com/dotnet/api/system.void
    - '*'
- api3: tx_ctx
  id: HackRFDotnet_NativeApi_Structs_HackrfTransfer_tx_ctx
  src: https://github.com/Realynx/HackRFDotnet/blob/master/HackRFDotnet/NativeApi/Structs/HackrfTransfer.cs#L42
  metadata:
    uid: HackRFDotnet.NativeApi.Structs.HackrfTransfer.tx_ctx
    commentId: F:HackRFDotnet.NativeApi.Structs.HackrfTransfer.tx_ctx
- markdown: User provided TX context. Not used by the library, but available to transfer callbacks for use. Set along with the transfer callback using <xref href="HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StartRx(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*%2cHackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback%2cSystem.Void*)" data-throw-if-not-resolved="false"></xref>.
- code: public void* tx_ctx
- h4: Field Value
- parameters:
  - type:
    - text: void
      url: https://learn.microsoft.com/dotnet/api/system.void
    - '*'
- api3: valid_length
  id: HackRFDotnet_NativeApi_Structs_HackrfTransfer_valid_length
  src: https://github.com/Realynx/HackRFDotnet/blob/master/HackRFDotnet/NativeApi/Structs/HackrfTransfer.cs#L31
  metadata:
    uid: HackRFDotnet.NativeApi.Structs.HackrfTransfer.valid_length
    commentId: F:HackRFDotnet.NativeApi.Structs.HackrfTransfer.valid_length
- markdown: Number of buffer bytes that were transferred.
- code: public int valid_length
- h4: Field Value
- parameters:
  - type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
languageId: csharp
metadata:
  description: >-
    USB transfer information passed to RX or TX callback.

    A callback should treat all these fields as read-only except that a TX callback should write to the data buffer and may write to 

    to indicate that a smaller number of bytes is to be transmitted.
