### YamlMime:ApiPage
title: Class HackRfNativeLib.DeviceStreaming
body:
- api1: Class HackRfNativeLib.DeviceStreaming
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming
  src: https://github.com/Realynx/HackRFDotnet/blob/master/HackRFDotnet/NativeApi/Lib/DeviceStreaming.cs#L11
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming
    commentId: T:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming
- facts:
  - name: Namespace
    value:
      text: HackRFDotnet.NativeApi.Lib
      url: HackRFDotnet.NativeApi.Lib.html
  - name: Assembly
    value: HackRFDotnet.dll
- code: public static class HackRfNativeLib.DeviceStreaming
- h4: Inheritance
- inheritance:
  - text: object
    url: https://learn.microsoft.com/dotnet/api/system.object
  - text: HackRfNativeLib.DeviceStreaming
    url: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.html
- h4: Inherited Members
- list:
  - text: object.Equals(object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - text: object.Equals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - text: object.GetHashCode()
    url: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - text: object.GetType()
    url: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - text: object.MemberwiseClone()
    url: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - text: object.ReferenceEquals(object?, object?)
    url: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - text: object.ToString()
    url: https://learn.microsoft.com/dotnet/api/system.object.tostring
- h2: Methods
- api3: ComputeBasebandFilterBandWidth(uint)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_ComputeBasebandFilterBandWidth_System_UInt32_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.ComputeBasebandFilterBandWidth(System.UInt32)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.ComputeBasebandFilterBandWidth(System.UInt32)
- markdown: >-
    Compute nearest valid baseband filter bandwidth to specified value.


    The result can be used via <xref href="HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetBasebandFilterBandwidth(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*%2cSystem.UInt32)" data-throw-if-not-resolved="false"></xref>.
- code: public static extern uint ComputeBasebandFilterBandWidth(uint bandwidth_hz)
- h4: Parameters
- parameters:
  - name: bandwidth_hz
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: Desired filter bandwidth in Hz.
- h4: Returns
- parameters:
  - type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: Nearest valid filter bandwidth in Hz.
- api3: ComputeBasebandFilterBandWidth_round_down_lt(uint)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_ComputeBasebandFilterBandWidth_round_down_lt_System_UInt32_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.ComputeBasebandFilterBandWidth_round_down_lt(System.UInt32)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.ComputeBasebandFilterBandWidth_round_down_lt(System.UInt32)
- markdown: >-
    Compute nearest valid baseband filter bandwidth lower than a specified value.


    The result can be used via <xref href="HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetBasebandFilterBandwidth(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*%2cSystem.UInt32)" data-throw-if-not-resolved="false"></xref>.
- code: public static extern uint ComputeBasebandFilterBandWidth_round_down_lt(uint bandwidth_hz)
- h4: Parameters
- parameters:
  - name: bandwidth_hz
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: Desired filter bandwidth in Hz.
- h4: Returns
- parameters:
  - type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: The highest valid filter bandwidth lower than <code class="paramref">bandwidth_hz</code> in Hz.
- api3: EnableAmp(HackRFDevice*, byte)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_EnableAmp_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.EnableAmp(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.EnableAmp(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte)
- markdown: >-
    Enable / disable 14dB RF amplifier.


    Enable / disable the ~11dB RF RX/TX amplifiers U13/U25 via controlling switches U9 and U14.
- code: public static extern HackrfError EnableAmp(HackRFDevice* device, byte value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: value
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: Enable (1) or disable (0) amplifier.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: EnableAntenna(HackRFDevice*, byte)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_EnableAntenna_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Byte_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.EnableAntenna(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.EnableAntenna(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Byte)
- markdown: >-
    Enable / disable bias-tee (antenna port power).


    Enable or disable the **3.3V (max 50mA)** bias-tee (antenna port power). Defaults to disabled.


    **NOTE:** the firmware auto-disables this after returning to IDLE mode, so a perma-set is not possible, which means all software supporting HackRF devices must support enabling bias-tee,

    as setting it externally is not possible like it is with RTL-SDR for example.
- code: public static extern HackrfError EnableAntenna(HackRFDevice* device, byte value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: value
    type:
    - text: byte
      url: https://learn.microsoft.com/dotnet/api/system.byte
    description: Enable (1) or disable (0) bias-tee.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: EnableTxFlush(HackRFDevice*, HackRFFlushCallback, void*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_EnableTxFlush_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__HackRFDotnet_NativeApi_Structs_HackRFFlushCallback_System_Void__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.EnableTxFlush(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.HackRFFlushCallback,System.Void*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.EnableTxFlush(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.HackRFFlushCallback,System.Void*)
- markdown: >-
    Setup flush (end-of-transmission) callback.


    This callback will be called when all the data was transmitted and all data transfers were completed. First parameter is supplied context, second parameter is success flag.
- code: public static extern HackrfError EnableTxFlush(HackRFDevice* device, HackRFFlushCallback callback, void* flush_ctx)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: callback
    type:
    - text: HackRFFlushCallback
      url: HackRFDotnet.NativeApi.Structs.HackRFFlushCallback.html
    description: callback to call when all transfers were completed.
  - name: flush_ctx
    type:
    - text: void
      url: https://learn.microsoft.com/dotnet/api/system.void
    - '*'
    description: context (1st parameter of callback).
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: FilterPathName(RfPathFilter)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_FilterPathName_HackRFDotnet_NativeApi_Enums_RfPathFilter_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.FilterPathName(HackRFDotnet.NativeApi.Enums.RfPathFilter)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.FilterPathName(HackRFDotnet.NativeApi.Enums.RfPathFilter)
- markdown: Convert <xref href="HackRFDotnet.NativeApi.Enums.RfPathFilter" data-throw-if-not-resolved="false"></xref> into human-readable string.
- code: public static extern sbyte* FilterPathName(RfPathFilter path)
- h4: Parameters
- parameters:
  - name: path
    type:
    - text: RfPathFilter
      url: HackRFDotnet.NativeApi.Enums.RfPathFilter.html
    description: Enum to convert.
- h4: Returns
- parameters:
  - type:
    - text: sbyte
      url: https://learn.microsoft.com/dotnet/api/system.sbyte
    - '*'
    description: Human-readable name of filter path.
- api3: GetTransferBufferSize(HackRFDevice*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_GetTransferBufferSize_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.GetTransferBufferSize(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.GetTransferBufferSize(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
- markdown: Get USB transfer buffer size.
- code: public static extern nuint GetTransferBufferSize(HackRFDevice* device)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Unused.
- h4: Returns
- parameters:
  - type:
    - text: nuint
      url: https://learn.microsoft.com/dotnet/api/system.uintptr
    description: Size in bytes.
- api3: GetTransferQueueDepth(HackRFDevice*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_GetTransferQueueDepth_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.GetTransferQueueDepth(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.GetTransferQueueDepth(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
- markdown: Get the total number of USB transfer buffers.
- code: public static extern uint GetTransferQueueDepth(HackRFDevice* device)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Unused.
- h4: Returns
- parameters:
  - type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: Number of buffers.
- api3: InitSweep(HackRFDevice*, ushort*, int, uint, uint, uint, SweepStyle)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_InitSweep_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt16__System_Int32_System_UInt32_System_UInt32_System_UInt32_HackRFDotnet_NativeApi_Enums_SweepStyle_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.InitSweep(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt16*,System.Int32,System.UInt32,System.UInt32,System.UInt32,HackRFDotnet.NativeApi.Enums.SweepStyle)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.InitSweep(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt16*,System.Int32,System.UInt32,System.UInt32,System.UInt32,HackRFDotnet.NativeApi.Enums.SweepStyle)
- markdown: >-
    Initialize sweep mode.


    In this mode, in a single data transfer(single call to the RX transfer callback), multiple blocks of size <code class="paramref">num_bytes</code> bytes are

    received with different center frequencies.At the beginning of each block, a 10-byte frequency header is present in

    <code>0x7F - 0x7F - uint64_t frequency(LSBFIRST, in Hz)</code> format, followed by the actual samples.


    Requires USB API version 0x0102 or above!
- code: public static extern HackrfError InitSweep(HackRFDevice* device, ushort* frequency_list, int num_ranges, uint num_bytes, uint step_width, uint offset, SweepStyle style)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: frequency_list
    type:
    - text: ushort
      url: https://learn.microsoft.com/dotnet/api/system.uint16
    - '*'
    description: List of start-stop frequency pairs in MHz.
  - name: num_ranges
    type:
    - text: int
      url: https://learn.microsoft.com/dotnet/api/system.int32
    description: Length of array <code class="paramref">frequency_list</code> (in pairs, so total array length / 2!). Must be less than <see name="NativeConstants.MAX_SWEEP_RANGES"></see>.
  - name: num_bytes
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: Number of bytes to capture per tuning, must be a multiple of <xref href="HackRFDotnet.NativeApi.NativeConstants.BYTES_PER_BLOCK" data-throw-if-not-resolved="false"></xref>.
  - name: step_width
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: Width of each tuning step in Hz.
  - name: offset
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: Frequency offset added to tuned frequencies.sample_rate / 2 is a good value.
  - name: style
    type:
    - text: SweepStyle
      url: HackRFDotnet.NativeApi.Enums.SweepStyle.html
    description: Sweep style.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: IsStreaming(HackRFDevice*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_IsStreaming_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.IsStreaming(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.IsStreaming(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
- markdown: Query device streaming status.
- code: public static extern HackrfError IsStreaming(HackRFDevice* device)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to query.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: >-
      <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_TRUE" data-throw-if-not-resolved="false"></xref> If the device is streaming, else one of <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_ERROR_STREAMING_THREAD_ERR" data-throw-if-not-resolved="false"></xref>,

      <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_ERROR_STREAMING_STOPPED" data-throw-if-not-resolved="false"></xref> or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_ERROR_STREAMING_EXIT_CALLED" data-throw-if-not-resolved="false"></xref>.
- api3: SetBasebandFilterBandwidth(HackRFDevice*, uint)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_SetBasebandFilterBandwidth_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt32_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetBasebandFilterBandwidth(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetBasebandFilterBandwidth(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32)
- markdown: >-
    Set baseband filter bandwidth.


    Possible values: 1.75, 2.5, 3.5, 5, 5.5, 6, 7, 8, 9, 10, 12, 14, 15, 20, 24, 28MHz, default \f$ \le 0.75 \cdot F_s \f$

    The functions <xref href="HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.ComputeBasebandFilterBandWidth(System.UInt32)" data-throw-if-not-resolved="false"></xref> and <xref href="HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.ComputeBasebandFilterBandWidth_round_down_lt(System.UInt32)" data-throw-if-not-resolved="false"></xref> can be used to get a valid value nearest to a given value.


    Setting the sample rate causes the filter bandwidth to be (re)set to its default \f$ \le 0.75 \cdot F_s \f$ value, so setting sample rate should be done before setting filter bandwidth.
- code: public static extern HackrfError SetBasebandFilterBandwidth(HackRFDevice* device, uint bandwidth_hz)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: device to configure.
  - name: bandwidth_hz
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: baseband filter bandwidth in Hz.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetBiasTOptions(HackRFDevice*, HackRFBiasTUserSettingReq*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_SetBiasTOptions_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__HackRFDotnet_NativeApi_Structs_HackRFBiasTUserSettingReq__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetBiasTOptions(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.HackRFBiasTUserSettingReq*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetBiasTOptions(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.HackRFBiasTUserSettingReq*)
- markdown: >-
    Configure bias tee behavior of the HackRF device when changing RF states.


    This function allows the user to configure bias tee behavior so that it can be turned on or off automatically by the HackRF when entering the RX, TX,

    or OFF state. By default, the HackRF switches off the bias tee when the RF path switches to OFF mode.


    The bias tee configuration is specified via a bitfield:

    0000000TmmRmmOmm


    Where setting T/R/O bits indicates that the TX/RX/Off behavior should be set to mode 'mm', 0 = don't modify


    mm specifies the bias tee mode:


    00 - do nothing.

    01 - reserved, do not use.

    10 - disable bias tee.

    11 - enable bias tee.
- code: public static extern HackrfError SetBiasTOptions(HackRFDevice* device, HackRFBiasTUserSettingReq* req)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: req
    type:
    - text: HackRFBiasTUserSettingReq
      url: HackRFDotnet.NativeApi.Structs.HackRFBiasTUserSettingReq.html
    - '*'
    description: Bias tee states, as a bitfield.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetClockSampleRate(HackRFDevice*, uint, uint)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_SetClockSampleRate_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt32_System_UInt32_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetClockSampleRate(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32,System.UInt32)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetClockSampleRate(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32,System.UInt32)
- code: public static extern HackrfError SetClockSampleRate(HackRFDevice* device, uint freq_hz, uint divider)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
  - name: freq_hz
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: divider
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
- api3: SetFrequency(HackRFDevice*, ulong)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_SetFrequency_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt64_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetFrequency(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt64)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetFrequency(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt64)
- markdown: >-
    Set the center frequency.


    Simple(auto) tuning via specifying a center frequency in Hz.


    This setting is not exact and depends on the PLL settings.Exact resolution is not determined, but the actual tuned frequency will be queryable in the future.
- code: public static extern HackrfError SetFrequency(HackRFDevice* device, ulong freq_hz)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to tune.
  - name: freq_hz
    type:
    - text: ulong
      url: https://learn.microsoft.com/dotnet/api/system.uint64
    description: freq_hz center frequency in Hz.Defaults to 900MHz. Should be in range 1-6000MHz, but 0-7250MHz is possible. The resolution is ~50Hz, I could not find the exact number.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetFrequency(HackRFDevice*, ulong, ulong, RfPathFilter)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_SetFrequency_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt64_System_UInt64_HackRFDotnet_NativeApi_Enums_RfPathFilter_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetFrequency(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt64,System.UInt64,HackRFDotnet.NativeApi.Enums.RfPathFilter)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetFrequency(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt64,System.UInt64,HackRFDotnet.NativeApi.Enums.RfPathFilter)
- markdown: >-
    Set the center frequency via explicit tuning.


    Center frequency is set to \f$f_{center} = f_{IF

    k\cdot f_ { LO }\f$ where \f$k\in\left\{-1; 0; 1\right\}\f$, depending on the value of <code class="paramref">path</code>. See the documentation of <xref href="HackRFDotnet.NativeApi.Enums.RfPathFilter" data-throw-if-not-resolved="false"></xref> for details.
- code: public static extern HackrfError SetFrequency(HackRFDevice* device, ulong if_freq_hz, ulong lo_freq_hz, RfPathFilter path)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to tune.
  - name: if_freq_hz
    type:
    - text: ulong
      url: https://learn.microsoft.com/dotnet/api/system.uint64
    description: Tuning frequency of the MAX2837 transceiver IC in Hz. Must be in the range of 2150-2750MHz.
  - name: lo_freq_hz
    type:
    - text: ulong
      url: https://learn.microsoft.com/dotnet/api/system.uint64
    description: Tuning frequency of the RFFC5072 mixer/synthesizer IC in Hz. Must be in the range 84.375-5400MHz, defaults to 1000MHz. No effect if <code class="paramref">path</code> is set to <xref href="HackRFDotnet.NativeApi.Enums.RfPathFilter.RF_PATH_FILTER_BYPASS" data-throw-if-not-resolved="false"></xref>.
  - name: path
    type:
    - text: RfPathFilter
      url: HackRFDotnet.NativeApi.Enums.RfPathFilter.html
    description: Filter path for mixer. See the documentation for <xref href="HackRFDotnet.NativeApi.Enums.RfPathFilter" data-throw-if-not-resolved="false"></xref> for details.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetLnaGain(HackRFDevice*, uint)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_SetLnaGain_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt32_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetLnaGain(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetLnaGain(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32)
- markdown: >-
    Set LNA gain.


    Set the RF RX gain of the MAX2837 transceiver IC ("IF" gain setting) in decibels. Must be in range 0-40dB, with 8dB steps.
- code: public static extern HackrfError SetLnaGain(HackRFDevice* device, uint value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: value
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: RX IF gain value in dB.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetRxOverrunLimit(HackRFDevice*, uint)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_SetRxOverrunLimit_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt32_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetRxOverrunLimit(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetRxOverrunLimit(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32)
- markdown: >-
    Set receive overrun limit.


    When this limit is set, after the specified number of samples (bytes, not whole IQ pairs) missing the device will automatically return to IDLE mode,

    thus stopping operation. Useful for handling cases like program/computer crashes or other problems. The default value 0 means no limit.


    Requires USB API version 0x0106 or above!
- code: public static extern HackrfError SetRxOverrunLimit(HackRFDevice* device, uint value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: value
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: Number of samples to wait before auto-stopping.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetSampleRate(HackRFDevice*, double)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_SetSampleRate_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_Double_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetSampleRate(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Double)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetSampleRate(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.Double)
- code: public static extern HackrfError SetSampleRate(HackRFDevice* device, double freq_hz)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
  - name: freq_hz
    type:
    - text: double
      url: https://learn.microsoft.com/dotnet/api/system.double
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
- api3: SetTxBlockCompleteCallback(HackRFDevice*, HackRFTxBlockCompleteCallback)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_SetTxBlockCompleteCallback_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__HackRFDotnet_NativeApi_Structs_HackRFTxBlockCompleteCallback_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetTxBlockCompleteCallback(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.HackRFTxBlockCompleteCallback)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetTxBlockCompleteCallback(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.HackRFTxBlockCompleteCallback)
- markdown: >-
    Setup callback to be called when an USB transfer is completed.


    This callback will be called whenever an USB transfer to the device is completed, regardless if it was successful or not (indicated by the second parameter).
- code: public static extern HackrfError SetTxBlockCompleteCallback(HackRFDevice* device, HackRFTxBlockCompleteCallback callback)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: callback
    type:
    - text: HackRFTxBlockCompleteCallback
      url: HackRFDotnet.NativeApi.Structs.HackRFTxBlockCompleteCallback.html
    description: Callback to call when a transfer is completed.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetTxUnderrunLimit(HackRFDevice*, uint)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_SetTxUnderrunLimit_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt32_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetTxUnderrunLimit(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetTxUnderrunLimit(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32)
- markdown: >-
    Set transmit underrun limit.


    When this limit is set, after the specified number of samples (bytes, not whole IQ pairs) missing the device will automatically return to IDLE mode,

    thus stopping operation. Useful for handling cases like program/computer crashes or other problems. The default value 0 means no limit.


    Requires USB API version 0x0106 or above!
- code: public static extern HackrfError SetTxUnderrunLimit(HackRFDevice* device, uint value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: value
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: Number of samples to wait before auto-stopping.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetTxVgaGain(HackRFDevice*, uint)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_SetTxVgaGain_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt32_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetTxVgaGain(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetTxVgaGain(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32)
- markdown: Set RF TX gain of the MAX2837 transceiver IC ("IF" or "VGA" gain setting) in decibels. Must be in range 0-47dB in 1dB steps.
- code: public static extern HackrfError SetTxVgaGain(HackRFDevice* device, uint value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: value
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: TX IF gain value in dB.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: SetVgaGain(HackRFDevice*, uint)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_SetVgaGain_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__System_UInt32_
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetVgaGain(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.SetVgaGain(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,System.UInt32)
- markdown: Set baseband RX gain of the MAX2837 transceiver IC ("BB" or "VGA" gain setting) in decibels. Must be in range 0-62dB with 2dB steps.
- code: public static extern HackrfError SetVgaGain(HackRFDevice* device, uint value)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: value
    type:
    - text: uint
      url: https://learn.microsoft.com/dotnet/api/system.uint32
    description: RX BB gain value in dB.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: StartRx(HackRFDevice*, HackRFSampleBlockCallback, void*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_StartRx_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__HackRFDotnet_NativeApi_Structs_HackRFSampleBlockCallback_System_Void__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StartRx(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback,System.Void*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StartRx(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback,System.Void*)
- markdown: >-
    Start receiving.


    Should be called after setting gains, frequency and sampling rate, as these values won't get reset but instead keep their last value, thus their state is unknown.


    The callback is called with a <xref href="HackRFDotnet.NativeApi.Structs.HackrfTransfer" data-throw-if-not-resolved="false"></xref> object whenever the buffer is full. The callback is called in an async context so no libhackrf functions should be called from it.

    The callback should treat its argument as read-only.
- code: public static extern HackrfError StartRx(HackRFDevice* device, HackRFSampleBlockCallback callback, void* rx_ctx)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: callback
    type:
    - text: HackRFSampleBlockCallback
      url: HackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback.html
    description: Rx_callback.
  - name: rx_ctx
    type:
    - text: void
      url: https://learn.microsoft.com/dotnet/api/system.void
    - '*'
    description: User provided RX context. Not used by the library, but available to <code class="paramref">callback</code> as <xref href="HackRFDotnet.NativeApi.Structs.HackrfTransfer.rx_ctx" data-throw-if-not-resolved="false"></xref>.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: StartRxSweep(HackRFDevice*, HackRFSampleBlockCallback, void*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_StartRxSweep_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__HackRFDotnet_NativeApi_Structs_HackRFSampleBlockCallback_System_Void__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StartRxSweep(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback,System.Void*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StartRxSweep(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback,System.Void*)
- markdown: >-
    Start RX sweep.


    See <xref href="HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.InitSweep(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*%2cSystem.UInt16*%2cSystem.Int32%2cSystem.UInt32%2cSystem.UInt32%2cSystem.UInt32%2cHackRFDotnet.NativeApi.Enums.SweepStyle)" data-throw-if-not-resolved="false"></xref> for more info.


    Requires USB API version 0x0104 or above!
- code: public static extern HackrfError StartRxSweep(HackRFDevice* device, HackRFSampleBlockCallback callback, void* rx_ctx)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to start sweeping.
  - name: callback
    type:
    - text: HackRFSampleBlockCallback
      url: HackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback.html
    description: Rx callback processing the received data.
  - name: rx_ctx
    type:
    - text: void
      url: https://learn.microsoft.com/dotnet/api/system.void
    - '*'
    description: User provided RX context.Not used by the library, but available to <code class="paramref">callback</code> as <xref href="HackRFDotnet.NativeApi.Structs.HackrfTransfer.rx_ctx" data-throw-if-not-resolved="false"></xref>.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: StartTx(HackRFDevice*, HackRFSampleBlockCallback, void*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_StartTx_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__HackRFDotnet_NativeApi_Structs_HackRFSampleBlockCallback_System_Void__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StartTx(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback,System.Void*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StartTx(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*,HackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback,System.Void*)
- markdown: >-
    Start transmitting (TX).


    ⚠️ Warning: Transmitting radio signals may be subject to national and international regulations. Use of this function without the appropriate license or authorization may violate FCC

    regulations (or equivalent regulatory authorities in your region) and could result in legal penalties.
- code: public static extern HackrfError StartTx(HackRFDevice* device, HackRFSampleBlockCallback callback, void* tx_ctx)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to configure.
  - name: callback
    type:
    - text: HackRFSampleBlockCallback
      url: HackRFDotnet.NativeApi.Structs.HackRFSampleBlockCallback.html
    description: Tx_callback.
  - name: tx_ctx
    type:
    - text: void
      url: https://learn.microsoft.com/dotnet/api/system.void
    - '*'
    description: User provided TX context. Not used by the library, but available to <code class="paramref">callback</code> as <xref href="HackRFDotnet.NativeApi.Structs.HackrfTransfer.tx_ctx" data-throw-if-not-resolved="false"></xref>.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: StopRx(HackRFDevice*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_StopRx_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StopRx(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StopRx(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
- markdown: Stop receiving.
- code: public static extern HackrfError StopRx(HackRFDevice* device)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: device to stop RX on.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
- api3: StopTx(HackRFDevice*)
  id: HackRFDotnet_NativeApi_Lib_HackRfNativeLib_DeviceStreaming_StopTx_HackRFDotnet_NativeApi_Structs_Devices_HackRFDevice__
  metadata:
    uid: HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StopTx(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
    commentId: M:HackRFDotnet.NativeApi.Lib.HackRfNativeLib.DeviceStreaming.StopTx(HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice*)
- markdown: Stop transmission.
- code: public static extern HackrfError StopTx(HackRFDevice* device)
- h4: Parameters
- parameters:
  - name: device
    type:
    - text: HackRFDevice
      url: HackRFDotnet.NativeApi.Structs.Devices.HackRFDevice.html
    - '*'
    description: Device to stop TX on.
- h4: Returns
- parameters:
  - type:
    - text: HackrfError
      url: HackRFDotnet.NativeApi.Enums.System.HackrfError.html
    description: <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError.HACKRF_SUCCESS" data-throw-if-not-resolved="false"></xref> on success or <xref href="HackRFDotnet.NativeApi.Enums.System.HackrfError" data-throw-if-not-resolved="false"></xref> variant.
languageId: csharp
